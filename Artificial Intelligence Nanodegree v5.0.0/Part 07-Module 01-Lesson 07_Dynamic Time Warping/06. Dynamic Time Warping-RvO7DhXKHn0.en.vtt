WEBVTT
Kind: captions
Language: en

00:00:00.300 --> 00:00:04.129
Okay, so all dynamic time warping is
doing is trying to align the samples

00:00:04.129 --> 00:00:06.767
between two whistles we're comparing so
that they best match up.

00:00:06.767 --> 00:00:07.173
&gt;&gt; Yep,

00:00:07.174 --> 00:00:12.170
let's line up the two signals we are
trying to compare on the x and y-axes.

00:00:12.169 --> 00:00:15.660
That will allow us to more easily
see how we are matching the samples.

00:00:15.660 --> 00:00:19.219
&gt;&gt; Okay, let's put the shorter one
on the y-axis for convenience.

00:00:19.219 --> 00:00:22.429
&gt;&gt; A match without any time warping
would be a straight diagonal going

00:00:22.429 --> 00:00:25.699
from the lower left-hand
corner to the upper right.

00:00:25.699 --> 00:00:28.780
But for the types of singles we're
comparing, that would be rare.

00:00:28.780 --> 00:00:31.720
&gt;&gt; We know we have to start with
the first sample in each signal.

00:00:31.719 --> 00:00:34.109
In this case, they're both 0.

00:00:34.109 --> 00:00:37.460
&gt;&gt; For the next sample in the x-axis,
we have another 0.

00:00:37.460 --> 00:00:40.609
Is it better to stay matched to
the 0 in the shorter sequence or

00:00:40.609 --> 00:00:43.240
transition to the 5 in the next sample?

00:00:43.240 --> 00:00:46.539
&gt;&gt; Well, there will be less
difference if we stay with the 0.

00:00:46.539 --> 00:00:50.609
&gt;&gt; So we'll draw a horizontal line here
indicating that we're matching the first

00:00:50.609 --> 00:00:54.890
two 0's on the x-axis with
the first 0 on the y-axis.

00:00:54.890 --> 00:00:56.969
&gt;&gt; For the next sample we have a 2.

00:00:56.969 --> 00:00:59.679
That still matches with
the 0 better than the 5.

00:00:59.679 --> 00:01:01.640
&gt;&gt; So we continue the horizontal line.

00:01:01.640 --> 00:01:05.090
&gt;&gt; But then we go to 3 on the x-axis
which matches the 5 better.

00:01:05.090 --> 00:01:08.579
&gt;&gt; So we transition up one on
the y-axis to indicate that.

00:01:08.579 --> 00:01:12.064
&gt;&gt; We're going to have several
3's in a row next on the x-axis.

00:01:12.064 --> 00:01:14.875
How do we match them to
the 5's on the y-axis?

00:01:14.875 --> 00:01:17.647
&gt;&gt; Well, we're going to need
a transition to the 2 and

00:01:17.647 --> 00:01:19.474
0 on the y-axis soon.

00:01:19.474 --> 00:01:20.974
So let's make our transitions so

00:01:20.974 --> 00:01:24.034
as to keep us close to
the diagonal line as possible.

00:01:24.034 --> 00:01:24.814
&gt;&gt; I get it.

00:01:24.814 --> 00:01:27.304
We're trying to match the values
as closely as possible

00:01:27.305 --> 00:01:28.365
to minimize the error.

00:01:28.364 --> 00:01:31.644
And if the values otherwise tie,
we try to keep to the diagonal.

00:01:31.644 --> 00:01:35.349
&gt;&gt; Correct,
the 3's will match the 5's pretty well.

00:01:35.349 --> 00:01:39.259
And by the time we get to the 2,
the 3 matches that even better.

00:01:39.260 --> 00:01:40.050
When we get to the 2 and

00:01:40.049 --> 00:01:44.840
the 1 on the x-axis, it'll match
very well with the 2 and 0 up here.

00:01:44.840 --> 00:01:47.579
And the 0 and
-1 match the 0 pretty well.

00:01:47.579 --> 00:01:50.783
&gt;&gt; Then we can match the -2, -3, -3,

00:01:50.784 --> 00:01:56.540
and -1 sequence on the x-axis to the 3,
-3 on the y-axis.

00:01:56.540 --> 00:02:00.042
&gt;&gt; And the rest of the long sequence,
0, 1, 1, 1, 1,

00:02:00.042 --> 00:02:04.000
matches the matches the 1,
1, and 2 on that y-axis.

00:02:04.000 --> 00:02:09.449
The last 1 has to match the last
2 to finish the process.

00:02:09.449 --> 00:02:12.180
&gt;&gt; Now we can calculate the euclidean
distance as before, but

00:02:12.180 --> 00:02:14.230
this time we had better matches.

00:02:14.229 --> 00:02:15.781
&gt;&gt; Yep, writing it out,

00:02:15.782 --> 00:02:21.510
we have the distance being the square
root 0 minus 0 squared which is 0.

00:02:21.509 --> 00:02:24.169
Plus 0 minus 0 squared again,
which is again 0.

00:02:25.289 --> 00:02:28.199
2 minus 0 squared is 4.

00:02:28.199 --> 00:02:31.119
3 minus 5 squared which is 4.

00:02:31.120 --> 00:02:32.599
&gt;&gt; I think we get the idea.

00:02:32.599 --> 00:02:33.060
&gt;&gt; Sorry,

00:02:33.060 --> 00:02:36.754
I always have to see these things
written out to really understand them.

00:02:36.754 --> 00:02:40.495
After a lot of scribbling, we get
a distance of the square root of 34,

00:02:40.495 --> 00:02:42.844
which is approximately equal to 6.

00:02:42.844 --> 00:02:45.645
&gt;&gt; That is less than half of the
distances we calculated before when we

00:02:45.645 --> 00:02:47.930
just padded the shorter
sequence with 0's.

00:02:47.930 --> 00:02:50.379
&gt;&gt; Which shows the power
of dynamic time warping.

00:02:50.379 --> 00:02:53.252
For situations where we know
the signals we are comparing,

00:02:53.252 --> 00:02:55.436
we'll have some sections
that are faster and

00:02:55.436 --> 00:02:58.087
some sections that are slower
compared to each other.

00:02:58.086 --> 00:02:59.879
DTW is a very useful tool.

00:02:59.879 --> 00:03:01.409
&gt;&gt; I see a problem, though.

00:03:01.409 --> 00:03:01.969
&gt;&gt; What's that?

