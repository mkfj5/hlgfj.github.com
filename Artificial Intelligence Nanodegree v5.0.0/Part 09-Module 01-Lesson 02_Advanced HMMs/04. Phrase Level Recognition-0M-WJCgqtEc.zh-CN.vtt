WEBVTT
Kind: captions
Language: zh-CN

00:00:00.370 --> 00:00:02.000
现在我们有 6 个手势的拓扑图

00:00:02.000 --> 00:00:05.849
我们讨论短语级别的手语识别

00:00:05.849 --> 00:00:08.230
我们想要识别 8 个短语

00:00:08.230 --> 00:00:10.710
— 实际上你是指 7 个手势和 12 个短语

00:00:11.759 --> 00:00:14.279
— 既然我们识别到 cat 的两个变化

00:00:14.279 --> 00:00:17.309
扩展所有可能性 形成 12 个短语

00:00:17.309 --> 00:00:18.279
— 说的不错

00:00:18.280 --> 00:00:21.320
为了简化 我们使用严谨的语法

00:00:21.320 --> 00:00:26.000
我们这里都是代词 加上动词和名词

00:00:26.000 --> 00:00:28.759
我们一次只识别一个短语

00:00:28.760 --> 00:00:31.080
— 我们展开来讲解

00:00:31.079 --> 00:00:31.949
— 非常棒

00:00:31.949 --> 00:00:33.859
接下来是复杂的部分

00:00:33.859 --> 00:00:37.329
— 假设我们得到了想要识别的 Thad 手势

00:00:37.329 --> 00:00:40.589
这里他用手语表示 I need cat (我需要猫)

00:00:40.590 --> 00:00:43.740
这真的是你提出来我们要用的短语吗？

00:00:43.740 --> 00:00:45.500
— 每个人都需要一只猫

00:00:45.500 --> 00:00:46.579
— 喵

00:00:46.579 --> 00:00:50.739
— 好 假设观察通过时间的 Δy 特征

00:00:50.740 --> 00:00:52.480
我们得到一系列观测

00:00:52.479 --> 00:00:54.659
— 约有 20 个通过时间的样本

00:00:54.659 --> 00:00:56.859
— 我们之前采用了相同的方式进行识别

00:00:56.859 --> 00:00:58.429
但是采用较大的网格图

00:00:58.429 --> 00:01:00.729
— 我们这里有 22 个状态

00:01:00.729 --> 00:01:08.409
I WE NEED WANT CAT1 和 CAT2 各有三个状态 TABLE 有四个状态

00:01:08.409 --> 00:01:10.950
— 当 t 等于 1 时 我们在哪里呢？

00:01:10.950 --> 00:01:14.680
— 语法表明我们首先从 I 或 we 开始

00:01:14.680 --> 00:01:19.290
我们首先在第一个状态 这两个代词中的一个

00:01:19.290 --> 00:01:22.050
— 当 t 等于 2 时 我们在哪里呢？

00:01:22.049 --> 00:01:23.969
我们可以维持在当前状态

00:01:25.180 --> 00:01:29.190
也可以转移到 I 或 we 的第二个状态

00:01:29.189 --> 00:01:31.209
— t 等于 3 时呢？

00:01:31.209 --> 00:01:32.149
— 还是很简单

00:01:32.150 --> 00:01:36.070
我们可以在状态 1 也可以到 I 或 we 的状态 3

00:01:36.069 --> 00:01:39.319
我们没有转移出第一个手势

00:01:39.319 --> 00:01:41.849
— 不过 t 等于 4 时发生什么呢？

00:01:41.849 --> 00:01:44.169
一旦 t 等于 4 至少从理论上来说

00:01:44.170 --> 00:01:49.140
我们可能转移到动词 want 或 need

00:01:49.140 --> 00:01:52.420
我们开始看到很快出现了复杂性

00:01:52.420 --> 00:01:54.760
— 没错 但是还没有太糟糕

00:01:54.760 --> 00:01:55.910
当 t 等于 5 时

00:01:55.909 --> 00:01:58.969
我们更有可能转移到 need 或 want

00:01:58.969 --> 00:02:01.164
但是还没到名词部分

00:02:01.165 --> 00:02:05.056
— t 等于 6 时 我们可能还是位于代词和动词上

00:02:05.055 --> 00:02:09.710
— 不过 t 等于 7 时 我们可能转移到 TABLE CAT1

00:02:09.711 --> 00:02:10.338
或 CAT 2

00:02:10.337 --> 00:02:14.576
— t 等于 8 时 我们会到达名词手势的第二个状态

00:02:14.576 --> 00:02:18.346
当 t 等于 9 时 我们实际上转移到名词手势的

00:02:18.346 --> 00:02:21.406
第三个状态
— t 等于 10 时我们首次

00:02:21.406 --> 00:02:25.219
从状态 3 回到状态 2

00:02:25.219 --> 00:02:28.186
这个循环让我们网格图变得有点复杂

00:02:28.186 --> 00:02:29.623
— 但还不算太糟糕

00:02:29.623 --> 00:02:32.620
我们刚才循环回来 得到第 4 个结构

00:02:32.620 --> 00:02:33.840
— 这是我们从示例短语中

00:02:33.840 --> 00:02:37.140
处理所有数据后得到的完整网格图

00:02:37.139 --> 00:02:37.969
— 哇塞

00:02:37.969 --> 00:02:41.169
这是我们可以提出的最简单示例

00:02:41.169 --> 00:02:45.429
不过注意这里 我们实际上最后不能达到所有状态

00:02:45.430 --> 00:02:49.885
我们会回到三个名词中其中一个的底部状态

00:02:49.884 --> 00:02:53.759
— 没错 这个网格图也表明隐马尔可夫模型会占用大量内存

00:02:53.759 --> 00:02:57.090
— 假如我们有个词语 包含了美式手语中所有

00:02:57.090 --> 00:03:01.129
6000 个手语 或者是一些手语的变体

00:03:01.129 --> 00:03:04.199
可以让美式手语表达丰富 更有速度

00:03:04.199 --> 00:03:07.319
— 如果我们使用实际语法会发生什么？

00:03:07.319 --> 00:03:09.049
这引发了很有意思的一点

00:03:09.050 --> 00:03:12.310
几乎所有语言识别器都会在保存完整网格图

00:03:12.310 --> 00:03:13.400
和内存方面存在问题

00:03:13.400 --> 00:03:16.370
— 维持所有路径更新也会是个问题

00:03:16.370 --> 00:03:18.360
— 怎样解决这个问题呢？

00:03:18.360 --> 00:03:19.810
— 我们要使用随机定向搜索

