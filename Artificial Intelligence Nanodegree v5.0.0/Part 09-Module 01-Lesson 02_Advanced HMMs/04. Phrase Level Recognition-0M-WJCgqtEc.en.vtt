WEBVTT
Kind: captions
Language: en

00:00:00.370 --> 00:00:02.000
Now that we have topologies for

00:00:02.000 --> 00:00:05.849
our six signs, let's talk about phrase
level sign language recognition.

00:00:05.849 --> 00:00:08.230
We have eight phrases
we want to recognize.

00:00:08.230 --> 00:00:10.710
&gt;&gt; Actually,
you mean 7 signs and 12 phrases.

00:00:11.759 --> 00:00:14.279
&gt;&gt; Since we have two variants
of cat we are recognizing,

00:00:14.279 --> 00:00:17.309
expanding all the possibilities
leads to 12 phrases.

00:00:17.309 --> 00:00:18.279
&gt;&gt; Good point.

00:00:18.280 --> 00:00:21.320
To keep things simple,
let's use a strict grammar.

00:00:21.320 --> 00:00:26.000
We will always have a pronoun followed
by a verb followed by a noun.

00:00:26.000 --> 00:00:28.759
And we'll only recognize
one phrase at a time.

00:00:28.760 --> 00:00:31.080
&gt;&gt; So let's expand that
out again to be explicit.

00:00:31.079 --> 00:00:31.949
&gt;&gt; Great.

00:00:31.949 --> 00:00:33.859
Now comes the messy part.

00:00:33.859 --> 00:00:37.329
&gt;&gt; Let's assume we have data from thad's
signing that we want to recognize.

00:00:37.329 --> 00:00:40.589
Here he is actually signing I need cat.

00:00:40.590 --> 00:00:43.740
Really, that's the phrase you
came up with for us to use?

00:00:43.740 --> 00:00:45.500
&gt;&gt; Everyone should have a cat.

00:00:45.500 --> 00:00:46.579
&gt;&gt; Meow.

00:00:46.579 --> 00:00:50.739
&gt;&gt; Okay, anyway suppose looking at the
delta y feature through time gives us

00:00:50.740 --> 00:00:52.480
this string of observations.

00:00:52.479 --> 00:00:54.659
&gt;&gt; Which is about 20
samples through time.

00:00:54.659 --> 00:00:56.859
&gt;&gt; We're going to do recognition
the same way as before, but

00:00:56.859 --> 00:00:58.429
with a much bigger trellis.

00:00:58.429 --> 00:01:00.729
&gt;&gt; We have 22 states to worry about.

00:01:00.729 --> 00:01:08.409
Three for each of I, WE, NEED, WANT,
CAT1 and CAT2 and four for TABLE.

00:01:08.409 --> 00:01:10.950
&gt;&gt; So
where can we be when t is equal to one?

00:01:10.950 --> 00:01:14.680
&gt;&gt; Well, the grammar says we
have to start with I or WE.

00:01:14.680 --> 00:01:19.290
So we have to be in the first state,
of either these two pronouns.

00:01:19.290 --> 00:01:22.050
&gt;&gt; Where can we be when t equals to two?

00:01:22.049 --> 00:01:23.969
Well, we could stand the current state.

00:01:25.180 --> 00:01:29.190
We could transition into
the second state of I or we.

00:01:29.189 --> 00:01:31.209
&gt;&gt; How about t equal to three?

00:01:31.209 --> 00:01:32.149
&gt;&gt; It's still easy.

00:01:32.150 --> 00:01:36.070
We can be in states one
through three for I or for we.

00:01:36.069 --> 00:01:39.319
We haven't had a chance to
transition out the first sign yet.

00:01:39.319 --> 00:01:41.849
&gt;&gt; But
what happens with t equal to four?

00:01:41.849 --> 00:01:44.169
Once we get to t equals four, we could,

00:01:44.170 --> 00:01:49.140
at least in theory, have transitioned
to either the verbs want or need.

00:01:49.140 --> 00:01:52.420
We are beginning to see the complexity,
that will soon overtake us.

00:01:52.420 --> 00:01:54.760
&gt;&gt; That's right, but
it's not too bad yet.

00:01:54.760 --> 00:01:55.910
At t equal to five,

00:01:55.909 --> 00:01:58.969
we have more opportunities where
we can transition to need or want.

00:01:58.969 --> 00:02:01.164
But we still can't get to the nouns yet.

00:02:01.165 --> 00:02:05.056
&gt;&gt; At t equals six,
we're still with the pronouns and verbs.

00:02:05.055 --> 00:02:09.710
&gt;&gt; But, at t equals seven, we could,
possibly, transition to TABLE, or CAT1,

00:02:09.711 --> 00:02:10.338
or CAT2.

00:02:10.337 --> 00:02:14.576
&gt;&gt; At t equals eight, we could get into
the second state of the noun signs, and

00:02:14.576 --> 00:02:18.346
a t equals nine, we can actually
transition into the third state of

00:02:18.346 --> 00:02:21.406
the noun signs
&gt;&gt; At t equals a ten we have the first

00:02:21.406 --> 00:02:25.219
time we can transition back from
state three to state two in table.

00:02:25.219 --> 00:02:28.186
This loop back complicates
our trellis a little bit.

00:02:28.186 --> 00:02:29.623
&gt;&gt; But it's not too bad.

00:02:29.623 --> 00:02:32.620
We just now have this back and
forth structure.

00:02:32.620 --> 00:02:33.840
&gt;&gt; And here's the full trails for

00:02:33.840 --> 00:02:37.140
after we taking care of all
the data from the example phrase.

00:02:37.139 --> 00:02:37.969
&gt;&gt; Wow.

00:02:37.969 --> 00:02:41.169
And this is the simplest
example we could come up with.

00:02:41.169 --> 00:02:45.429
But note here, we couldn't actually
reach all this states in the end.

00:02:45.430 --> 00:02:49.885
We have to get back to the bottom
states of one of the three nouns.

00:02:49.884 --> 00:02:53.759
&gt;&gt; Yup, this trail also shows how HMM
is going to take up a lot of memory.

00:02:53.759 --> 00:02:57.090
&gt;&gt; Imagine if we had a vocabulary that
included all of the six thousand signs

00:02:57.090 --> 00:03:01.129
in the American Sign Language, or even
worse yet, all the variations of those

00:03:01.129 --> 00:03:04.199
signs that give the ASL its
expressiveness and speed.

00:03:04.199 --> 00:03:07.319
&gt;&gt; Not to mention what would happen
if we were using a real grammar?

00:03:07.319 --> 00:03:09.049
Which brings up an interesting point.

00:03:09.050 --> 00:03:12.310
Almost all of language recognizers will
have problems keeping the full trellis

00:03:12.310 --> 00:03:13.400
and memory.

00:03:13.400 --> 00:03:16.370
&gt;&gt; And keeping all the paths
updated will also be a problem.

00:03:16.370 --> 00:03:18.360
&gt;&gt; How will we deal with this problem?

00:03:18.360 --> 00:03:19.810
&gt;&gt; We'll use the stochastic beam search.

