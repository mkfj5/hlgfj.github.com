{
  "data": {
    "lesson": {
      "id": 559333,
      "key": "0678bdc2-eae7-4f37-948e-b559460e2de6",
      "title": "Optimizing Minimax Search",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Thad explains some of the limitations of minimax search and introduces optimizations & changes that make it practical in more complex domains.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/0678bdc2-eae7-4f37-948e-b559460e2de6/559333/1538955396232/Optimizing+Minimax+Search+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/0678bdc2-eae7-4f37-948e-b559460e2de6/559333/1538955388609/Optimizing+Minimax+Search+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 590562,
          "key": "e48ebca0-e637-4b3f-81f1-478cda20c915",
          "title": "Lesson Plan - Week 9",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e48ebca0-e637-4b3f-81f1-478cda20c915",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 593066,
              "key": "05bf9fc2-d49c-41d5-b49e-50225e846161",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Lesson Plan: Week 9\n---\nThe lectures this week address several of the limitations of the basic minimax search algorithm, with an emphasis on techniques that are applicable to the project. \n\n## Classroom\n- Watch the **Optimizing Minimax Search**\n- Complete the \"Build an Adversarial Game Playing Agent\" project (Remember to start early!)\n- (_Optional_) Review the **Additional Topics** lessons, which includes more advanced extensions of Minimax and select readings.\n\n## Reading\n- Read AIMA **Chapter 5.3**; skim AIMA **5.4-5.8**\n- [Game Tree Searching by Min / Max Approximation by Ron Rivest, MIT](https://people.csail.mit.edu/rivest/pubs/Riv87c.pdf)\n- (_Optional_) [Deep Blue by IBM](https://pdfs.semanticscholar.org/ad2c/1efffcd7c3b7106e507396bdaa5fe00fa597.pdf)\n- (_Optional_) [AlphaGo from DeepMind](https://storage.googleapis.com/deepmind-media/alphago/AlphaGoNaturePaper.pdf)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 193884,
          "key": "54475991440923",
          "title": "Minimax Quiz",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54475991440923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 193499,
              "key": "5447599144",
              "title": "Minimax Quiz",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "5447599144",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "8CZZiwds8X8",
                  "china_cdn_id": "8CZZiwds8X8.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Minimax Quiz",
                "alt_text": null,
                "background_image": "//lh3.googleusercontent.com/muc5n9LoOeFW7sZkIutOzj_xkXsyD8k7-6VNscOyZRD9d__f7SOpIDI4Xth4Bv-shfDcy9xvFVbl2bs2WA=s0#w=1920&h=1080",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5447599144",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "5447599146",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric1",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.44322786783042395,
                      "y": 0.19401330376940132
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric2",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.29880377182044887,
                      "y": 0.4351787694013304
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric3",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.5954449812967582,
                      "y": 0.4074279379157428
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric4",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.2247895885286783,
                      "y": 0.7046147450110865
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric5",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.37277899002493764,
                      "y": 0.7018777716186253
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric6",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.516189993765586,
                      "y": 0.7018431263858093
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric7",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.6709593204488778,
                      "y": 0.7006305432372506
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "eRB93Dr5iM8",
                  "china_cdn_id": "eRB93Dr5iM8.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 194000,
          "key": "53956591910923",
          "title": "Depth-Limited Search",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "53956591910923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 193635,
              "key": "5395659191",
              "title": "Depth-Limited Search",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "EZ8pO3PEFYU",
                "china_cdn_id": "EZ8pO3PEFYU.mp4"
              }
            }
          ]
        },
        {
          "id": 624550,
          "key": "be6389f3-d4ae-4cce-a65b-d292f72ff7ff",
          "title": "Coding: Depth-Limited Search",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "be6389f3-d4ae-4cce-a65b-d292f72ff7ff",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 624558,
              "key": "7883e547-9178-44f9-a94c-c698c6de86e7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Adding a Depth Limit\n---\nMinimax search is guaranteed to find an optimal move, but it is impractical for all but the most trivial games. Game trees grow exponentially with each additional level of search, so the algorithm runtime is also exponential. With only finite computational resources available, we need a way to bound the runtime of the search. Using a fixed depth limit is the simplest mechanism to limit the runtime (although it introduces new problems that we'll see later).\n\nThad demonstrated the math to estimate a value to use for a fixed depth limit, so now it's time to add a depth limit to our minimax code.  We'll add the depth limit as an additional parameter passed to each of the minimax functions, and then we'll update the logic to cut off search when we reach the depth limit.\n\nIn the quiz below, you need to add a new parameter named `depth` to each of the minimax functions, then update all of the function calls to pass the depth parameter to the next function, and add a new conditional test to cutoff the search when the depth limit is reached. The depth parameter passed to the minimax decision function will always be an integer value greater than or equal to 1. Recall that the \"depth\" of a node in a graph is equal to the number of edges between the node and the root of the tree. (The depth of the root is 0, the depth of the children of the root is 1, etc.)",
              "instructor_notes": ""
            },
            {
              "id": 624560,
              "key": "a92f8100-1ae3-4245-8a7f-3493944e5bda",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "a92f8100-1ae3-4245-8a7f-3493944e5bda",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "Depth Limited Minimax",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6221159601930240",
                "initial_code_files": [
                  {
                    "text": "\n# TODO: Incorporate the `depth` parameter into each function\n# TODO: Update all recursive calls to pass the depth parameter\n# TODO: Add a new conditional to cut off search when the depth\n#       limit is reached\n# NOTE: The minimax_decision function has been done for you!\n\ndef minimax_decision(gameState, depth):\n    \"\"\" Return the move along a branch of the game tree that\n    has the best possible value.  A move is a pair of coordinates\n    in (column, row) order corresponding to a legal move for\n    the searching player.\n    \n    You can ignore the special case of calling this function\n    from a terminal state.\n    \"\"\"\n    best_score = float(\"-inf\")\n    best_move = None\n    for a in gameState.actions():\n        # DONE: call has been updated with a depth limit\n        v = min_value(gameState.result(a), depth - 1)\n        if v > best_score:\n            best_score = v\n            best_move = a\n    return best_move\n\n# TODO: add a depth parameter to the function signature\ndef min_value(gameState):\n    \"\"\" Return the value for a win (+1) if the game is over,\n    otherwise return the minimum value over all legal child\n    nodes.\n    \"\"\"\n    if gameState.terminal_test():\n        return gameState.utility(0)\n        \n    # TODO: add a new conditional test to cut off search\n    #       when the depth parameter reaches 0 -- for now\n    #       just return a value of 0 at the depth limit\n    \n    v = float(\"inf\")\n    for a in gameState.actions():\n        # TODO: pass a decremented depth parameter to each recursive call\n        v = min(v, max_value(gameState.result(a)))\n    return v\n\n\n# TODO: add a depth parameter to the function signature\ndef max_value(gameState):\n    \"\"\" Return the value for a loss (-1) if the game is over,\n    otherwise return the maximum value over all legal child\n    nodes.\n    \"\"\"\n    if gameState.terminal_test():\n        return gameState.utility(0)\n    \n    # TODO: add a new conditional test to cut off search\n    #       when the depth parameter reaches 0 -- for now\n    #       just return a value of 0 at the depth limit\n    \n    v = float(\"-inf\")\n    for a in gameState.actions():\n        # TODO: pass a decremented depth parameter to each recursive call\n        v = max(v, min_value(gameState.result(a)))\n    return v\n",
                    "name": "minimax.py"
                  },
                  {
                    "text": "\n# Please use this implementation for compatability with the test cases\n\nfrom copy import deepcopy\n\ncall_counter = 0\nxlim, ylim = 3, 2  # board dimensions\n\n# The eight movement directions possible for a chess queen\nRAYS = [(1, 0), (1, -1), (0, -1), (-1, -1),\n        (-1, 0), (-1, 1), (0, 1), (1, 1)]\n\n\nclass GameState:\n    \"\"\"\n    Attributes\n    ----------\n    _board: list(list)\n        Represent the board with a 2d array _board[x][y]\n        where open spaces are 0 and closed spaces are 1\n    \n    _parity: bool\n        Keep track of active player initiative (which\n        player has control to move) where 0 indicates that\n        player one has initiative and 1 indicates player 2\n    \n    _player_locations: list(tuple)\n        Keep track of the current location of each player\n        on the board where position is encoded by the\n        board indices of their last move, e.g., [(0, 0), (1, 0)]\n        means player 1 is at (0, 0) and player 2 is at (1, 0)\n    \"\"\"\n    def __init__(self):\n        self._board = [[0] * ylim for _ in range(xlim)]\n        self._board[-1][-1] = 1  # block lower-right corner\n        self._parity = 0\n        self._player_locations = [None, None]\n        \n    def actions(self):\n        \"\"\" Return a list of legal actions for the active player \"\"\"\n        return self.liberties(self._player_locations[self._parity])\n    \n    def player(self):\n        \"\"\" Return the id of the active player \"\"\"\n        return self._parity\n    \n    def result(self, action):\n        \"\"\" Return a new state that results from applying the given\n        action in the current state\n        \"\"\"\n        assert action in self.actions(), \"Attempted forecast of illegal move\"\n        newBoard = deepcopy(self)\n        newBoard._board[action[0]][action[1]] = 1\n        newBoard._player_locations[self._parity] = action\n        newBoard._parity ^= 1\n        return newBoard\n    \n    def terminal_test(self):\n        \"\"\" return True if the current state is terminal,\n        and False otherwise\n        \n        Hint: an Isolation state is terminal if _either_\n        player has no remaining liberties (even if the\n        player is not active in the current state)\n        \"\"\"\n        global call_counter\n        call_counter += 1\n        return (not self._has_liberties(self._parity)\n            or not self._has_liberties(1 - self._parity))\n\n    def utility(self, player_id):\n        \"\"\" return +inf if the game is terminal and the\n        specified player wins, return -inf if the game\n        is terminal and the specified player loses, and\n        return 0 if the game is not terminal\n        \"\"\"\n        if not self.terminal_test(): return 0\n        player_id_is_active = (player_id == self.player())\n        active_has_liberties = self._has_liberties(self.player())\n        active_player_wins = (active_has_liberties == player_id_is_active)\n        return float(\"inf\") if active_player_wins else float(\"-inf\")\n    \n    def liberties(self, loc):\n        \"\"\" Return a list of all open cells in the\n        neighborhood of the specified location.  The list \n        should include all open spaces in a straight line\n        along any row, column or diagonal from the current\n        position. (Tokens CANNOT move through obstacles\n        or blocked squares in queens Isolation.)\n        \"\"\"\n        if loc is None: return self._get_blank_spaces()\n        moves = []\n        for dx, dy in RAYS:  # check each movement direction\n            _x, _y = loc\n            while 0 <= _x + dx < xlim and 0 <= _y + dy < ylim:\n                _x, _y = _x + dx, _y + dy\n                if self._board[_x][_y]:  # stop at any blocked cell\n                    break\n                moves.append((_x, _y))\n        return moves\n    \n    def _has_liberties(self, player_id):\n        \"\"\" Check to see if the specified player has any liberties \"\"\"\n        return any(self.liberties(self._player_locations[player_id]))\n\n    def _get_blank_spaces(self):\n        \"\"\" Return a list of blank spaces on the board.\"\"\"\n        return [(x, y) for y in range(ylim) for x in range(xlim)\n                if self._board[x][y] == 0]",
                    "name": "gamestate.py"
                  },
                  {
                    "text": "\nimport minimax\nimport gamestate as game\n\n\n# Test the depth limit by checking the number of nodes visited\n# -- recall that minimax visits every node in the search tree,\n# so if we search depth one on an empty board then minimax should\n# visit each of the five open spaces\ndepth_limit = 1\nexpected_node_count = 5\nrootNode = game.GameState()\n_ = minimax.minimax_decision(rootNode, depth_limit)\n\nprint(\"Expected node count: {}\".format(expected_node_count))\nprint(\"Your node count: {}\".format(game.call_counter))\n\nif game.call_counter == expected_node_count:\n    print(\"That's right! Looks like your depth limit is working!\")\nelse:\n    print(\"Uh oh...looks like there may be a problem.\")\n",
                    "name": "testcode.py"
                  },
                  {
                    "text": "\ndef minimax_decision(gameState, depth):\n    \"\"\" Return the move along a branch of the game tree that\n    has the best possible value.  A move is a pair of coordinates\n    in (column, row) order corresponding to a legal move for\n    the searching player.\n    \n    You can ignore the special case of calling this function\n    from a terminal state.\n    \"\"\"\n    best_score = float(\"-inf\")\n    best_move = None\n    for a in gameState.actions():\n        \n        # call has been updated with a depth limit\n        v = min_value(gameState.result(a), depth - 1)\n        if v > best_score:\n            best_score = v\n            best_move = a\n    return best_move\n\n\ndef min_value(gameState, depth):\n    \"\"\" Return the value for a win (+1) if the game is over,\n    otherwise return the minimum value over all legal child\n    nodes.\n    \"\"\"\n    if gameState.terminal_test():\n        return gameState.utility(0)\n    \n    # New conditional depth limit cutoff\n    if depth <= 0:  # \"==\" could be used, but \"<=\" is safer \n        return 0\n    \n    v = float(\"inf\")\n    for a in gameState.actions():\n        # the depth should be decremented by 1 on each call\n        v = min(v, max_value(gameState.result(a), depth - 1))\n    return v\n\n\ndef max_value(gameState, depth):\n    \"\"\" Return the value for a loss (-1) if the game is over,\n    otherwise return the maximum value over all legal child\n    nodes.\n    \"\"\"\n    if gameState.terminal_test():\n        return gameState.utility(0)\n    \n    # New conditional depth limit cutoff\n    if depth <= 0:  # \"==\" could be used, but \"<=\" is safer \n        return 0\n    \n    v = float(\"-inf\")\n    for a in gameState.actions():\n        # the depth should be decremented by 1 on each call\n        v = max(v, min_value(gameState.result(a), depth - 1))\n    return v\n",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 194071,
          "key": "66393586450923",
          "title": "Evaluation Function Intro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "66393586450923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 193717,
              "key": "6639358645",
              "title": "Evaluation Function Intro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "hWPQrnLmYOk",
                "china_cdn_id": "hWPQrnLmYOk.mp4"
              }
            }
          ]
        },
        {
          "id": 193997,
          "key": "53956591920923",
          "title": "Testing the Evaluation Function",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "53956591920923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 193632,
              "key": "5395659192",
              "title": "Testing the Evaluation Function",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "5395659192",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "zBdMKbgJ4HU",
                  "china_cdn_id": "zBdMKbgJ4HU.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Testing the Evaluation Function",
                "alt_text": null,
                "background_image": "//lh3.googleusercontent.com/raUhlRxPo1jQ_OpPxK2FibqMni7vdv088X_8HXkzvXMt2ITbdVyHw8vuqTdqHeTOWC16AB9WGK5iNVHlow=s0#w=1920&h=1080",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5395659192",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "5395659194",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric1",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.5125272755610972,
                      "y": 0.30380404656319293
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric2",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.14518391521197008,
                      "y": 0.520509977827051
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric3",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.36149859725685785,
                      "y": 0.5208910753880266
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric4",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.6225841645885287,
                      "y": 0.5221729490022173
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric5",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.8819747506234414,
                      "y": 0.5264689578713969
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric6",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.034055486284289276,
                      "y": 0.8416019955654102
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric7",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.12211658354114713,
                      "y": 0.841879157427938
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric8",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.20692409600997505,
                      "y": 0.8412208980044346
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric9",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.2934850374064838,
                      "y": 0.8395579268292683
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric10",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.3827345698254364,
                      "y": 0.8405626385809313
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric11",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.46814604114713215,
                      "y": 0.838795731707317
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric12",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.5560512780548629,
                      "y": 0.8355737250554324
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric13",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.6431382481296758,
                      "y": 0.8372366962305987
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric14",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.7295043640897756,
                      "y": 0.838934312638581
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric15",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.8180720074812967,
                      "y": 0.8340146895787139
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric16",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.9027041770573566,
                      "y": 0.8341532705099778
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "FryRdCHb0y0",
                  "china_cdn_id": "FryRdCHb0y0.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 194034,
          "key": "54475991280923",
          "title": "Testing the Evaluation Function Part 2",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54475991280923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 193672,
              "key": "5447599128",
              "title": "Testing the Evaluation Function Part 2",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "Click to open: [Isolation Game Tree - Level 3](https://s3.amazonaws.com/content.udacity-data.com/courses/ud954/images/isolation-L3_minMax.svg)",
              "user_state": {
                "node_key": "5447599128",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "O6AOr3Im6_8",
                  "china_cdn_id": "O6AOr3Im6_8.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Testing the Evaluation Function Part 2",
                "alt_text": null,
                "background_image": "https://lh3.googleusercontent.com/YFjApFWwZGSaeB-ATZplR1UX_IN-QzbaYjge9NZ0L7Ch3x3yVrf1ldG70rPnqsbRtUuW_CjhdbTrLwoNM2E=s0#w=1920&h=1080",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5447599128",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "5447599130",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric1",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.476367674563591,
                      "y": 0.20690133037694014
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric2",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.19646197007481297,
                      "y": 0.5397034368070953
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric3",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.32329332917705733,
                      "y": 0.5444844789356984
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric4",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.4508065773067332,
                      "y": 0.5399113082039911
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric5",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.5523495947630923,
                      "y": 0.5480875831485588
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric6",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.7592347256857855,
                      "y": 0.5357538802660754
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "AzjVqG1LZo8",
                  "china_cdn_id": "AzjVqG1LZo8.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 193888,
          "key": "63816295690923",
          "title": "Testing Evaluation Functions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "63816295690923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 193505,
              "key": "6381629569",
              "title": "Testing Evaluation Functions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "6x-zfTyo81I",
                "china_cdn_id": "6x-zfTyo81I.mp4"
              }
            }
          ]
        },
        {
          "id": 194132,
          "key": "54475991320923",
          "title": "Testing the Evaluation Function Part 3",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54475991320923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 193783,
              "key": "5447599132",
              "title": "Testing the Evaluation Function Part 3",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "Click to open: [Isolation Game Tree - Level 2](https://s3.amazonaws.com/content.udacity-data.com/courses/ud954/images/isolation-L2_minMax.svg)",
              "user_state": {
                "node_key": "5447599132",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "1ns6OMenIvc",
                  "china_cdn_id": "1ns6OMenIvc.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Testing the Evaluation Function Part 3",
                "alt_text": null,
                "background_image": "//lh3.googleusercontent.com/tO_vpM9ONfgS7m5xb5eBQDpZjON1H3wDRfx_sJKWe5nUyeZlhRWeMBC4E5gduVLr062DwEbtkXjGy_VNkw=s0#w=1920&h=1080",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5447599132",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "5447599134",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric1",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.5085528366583542,
                      "y": 0.22249168514412418
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric2",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.2238739089775561,
                      "y": 0.5511710088691796
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric3",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.35655003117206985,
                      "y": 0.5550512749445676
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric4",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.48554395261845384,
                      "y": 0.5553977272727273
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric5",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.58897677680798,
                      "y": 0.5615645787139689
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric6",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.7970503428927681,
                      "y": 0.5511363636363636
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "_uiwip5it8U",
                  "china_cdn_id": "_uiwip5it8U.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 624561,
          "key": "f18afc93-2fa7-49b9-b41a-c1fd6b786c15",
          "title": "Coding: #my_moves Heuristic",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f18afc93-2fa7-49b9-b41a-c1fd6b786c15",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 624567,
              "key": "3a10aebf-12a0-46c7-9353-a8fb655eae27",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Adding an Evaluation Function\n---\nThe earlier implementation of depth limited search assumed that the value of any state where search cut off was zero—but we don't _know_ without finishing the search that those states have a value of zero (and, in fact, for the isolation game we know that they do **not** have a value of zero because there are no ties, so every state is either a win or a loss for the current player). Therefore, we can improve the performance of depth limited search using the concept of an \"evaluation function\" (also called a heuristic function), which is like \"intuition\" for the search procedure about which moves are likely to result in wins or losses.\n",
              "instructor_notes": ""
            },
            {
              "id": 624569,
              "key": "26b5c2df-e6ec-4163-abfc-65f2fa5a4d34",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "26b5c2df-e6ec-4163-abfc-65f2fa5a4d34",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "#My moves heuristic",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6074214543654912",
                "initial_code_files": [
                  {
                    "text": "\n# TODO: Implement the my_moves() function\n# TODO: Change the value returned when the depth cutoff is\n#       reached to call and return the score from my_moves()\n\n# Use the player_id when you call \"my_moves()\"\n# DO NOT MODIFY THE PLAYER ID\nplayer_id = 0\n\ndef my_moves(gameState):\n    # TODO: Finish this function!\n    # HINT: the global player_id variable is accessible inside\n    #       this function scope\n    raise NotImplementedError\n\n\ndef minimax_decision(gameState, depth):\n    \"\"\" Return the move along a branch of the game tree that\n    has the best possible value.  A move is a pair of coordinates\n    in (column, row) order corresponding to a legal move for\n    the searching player.\n    \n    You can ignore the special case of calling this function\n    from a terminal state.\n    \"\"\"\n    best_score = float(\"-inf\")\n    best_move = None\n    for a in gameState.actions():\n        # call has been updated with a depth limit\n        v = min_value(gameState.result(a), depth - 1)\n        if v > best_score:\n            best_score = v\n            best_move = a\n    return best_move\n\n\ndef min_value(gameState, depth):\n    \"\"\" Return the value for a win (+1) if the game is over,\n    otherwise return the minimum value over all legal child\n    nodes.\n    \"\"\"\n    if gameState.terminal_test():\n        return gameState.utility(0)\n    \n    # New conditional depth limit cutoff\n    if depth <= 0:  # \"==\" could be used, but \"<=\" is safer \n        return 0\n    \n    v = float(\"inf\")\n    for a in gameState.actions():\n        # the depth should be decremented by 1 on each call\n        v = min(v, max_value(gameState.result(a), depth - 1))\n    return v\n\n\ndef max_value(gameState, depth):\n    \"\"\" Return the value for a loss (-1) if the game is over,\n    otherwise return the maximum value over all legal child\n    nodes.\n    \"\"\"\n    if gameState.terminal_test():\n        return gameState.utility(0)\n    \n    # New conditional depth limit cutoff\n    if depth <= 0:  # \"==\" could be used, but \"<=\" is safer \n        return 0\n    \n    v = float(\"-inf\")\n    for a in gameState.actions():\n        # the depth should be decremented by 1 on each call\n        v = max(v, min_value(gameState.result(a), depth - 1))\n    return v\n",
                    "name": "minimax.py"
                  },
                  {
                    "text": "\n# Please use this implementation for compatability with the test cases\n\nfrom copy import deepcopy\n\ncall_counter = 0\nxlim, ylim = 3, 2  # board dimensions\n\n# The eight movement directions possible for a chess queen\nRAYS = [(1, 0), (1, -1), (0, -1), (-1, -1),\n        (-1, 0), (-1, 1), (0, 1), (1, 1)]\n\n\nclass GameState:\n    \"\"\"\n    Attributes\n    ----------\n    _board: list(list)\n        Represent the board with a 2d array _board[x][y]\n        where open spaces are 0 and closed spaces are 1\n    \n    _parity: bool\n        Keep track of active player initiative (which\n        player has control to move) where 0 indicates that\n        player one has initiative and 1 indicates player 2\n    \n    _player_locations: list(tuple)\n        Keep track of the current location of each player\n        on the board where position is encoded by the\n        board indices of their last move, e.g., [(0, 0), (1, 0)]\n        means player 1 is at (0, 0) and player 2 is at (1, 0)\n    \"\"\"\n    def __init__(self):\n        self._board = [[0] * ylim for _ in range(xlim)]\n        self._board[-1][-1] = 1  # block lower-right corner\n        self._parity = 0\n        self._player_locations = [None, None]\n        \n    def actions(self):\n        \"\"\" Return a list of legal actions for the active player \"\"\"\n        return self.liberties(self._player_locations[self._parity])\n    \n    def player(self):\n        \"\"\" Return the id of the active player \"\"\"\n        return self._parity\n    \n    def result(self, action):\n        \"\"\" Return a new state that results from applying the given\n        action in the current state\n        \"\"\"\n        assert action in self.actions(), \"Attempted forecast of illegal move\"\n        newBoard = deepcopy(self)\n        newBoard._board[action[0]][action[1]] = 1\n        newBoard._player_locations[self._parity] = action\n        newBoard._parity ^= 1\n        return newBoard\n    \n    def terminal_test(self):\n        \"\"\" return True if the current state is terminal,\n        and False otherwise\n        \n        Hint: an Isolation state is terminal if _either_\n        player has no remaining liberties (even if the\n        player is not active in the current state)\n        \"\"\"\n        global call_counter\n        call_counter += 1\n        return (not self._has_liberties(self._parity)\n            or not self._has_liberties(1 - self._parity))\n\n    def utility(self, player_id):\n        \"\"\" return +inf if the game is terminal and the\n        specified player wins, return -inf if the game\n        is terminal and the specified player loses, and\n        return 0 if the game is not terminal\n        \"\"\"\n        if not self.terminal_test(): return 0\n        player_id_is_active = (player_id == self.player())\n        active_has_liberties = self._has_liberties(self.player())\n        active_player_wins = (active_has_liberties == player_id_is_active)\n        return float(\"inf\") if active_player_wins else float(\"-inf\")\n    \n    def liberties(self, loc):\n        \"\"\" Return a list of all open cells in the\n        neighborhood of the specified location.  The list \n        should include all open spaces in a straight line\n        along any row, column or diagonal from the current\n        position. (Tokens CANNOT move through obstacles\n        or blocked squares in queens Isolation.)\n        \"\"\"\n        if loc is None: return self._get_blank_spaces()\n        moves = []\n        for dx, dy in RAYS:  # check each movement direction\n            _x, _y = loc\n            while 0 <= _x + dx < xlim and 0 <= _y + dy < ylim:\n                _x, _y = _x + dx, _y + dy\n                if self._board[_x][_y]:  # stop at any blocked cell\n                    break\n                moves.append((_x, _y))\n        return moves\n    \n    def _has_liberties(self, player_id):\n        \"\"\" Check to see if the specified player has any liberties \"\"\"\n        return any(self.liberties(self._player_locations[player_id]))\n\n    def _get_blank_spaces(self):\n        \"\"\" Return a list of blank spaces on the board.\"\"\"\n        return [(x, y) for y in range(ylim) for x in range(xlim)\n                if self._board[x][y] == 0]",
                    "name": "gamestate.py"
                  },
                  {
                    "text": "\nimport gamestate as game\n\nfrom minimax import min_value\n\n\ndepth_limit = 1\nexpected_values = 0\nrootNode = game.GameState()\ntests = [((0, 0), 2), ((1, 0), 3), ((2, 0), 1), ((0, 1), 2), ((1, 1), 3)]\n\nif all(min_value(rootNode.result(a), depth_limit) == v for a, v in tests):\n    print(\"Good job!\")\nelse:\n    print(\"Uh oh!\\n Looks like one or more of the values didn't match.\")\n\n",
                    "name": "testcode.py"
                  },
                  {
                    "text": "\n# DO NOT MODIFY THE PLAYER ID\nplayer_id = 0\n\ndef my_moves(gameState):\n    loc = gameState._player_locations[player_id]\n    return len(gameState.liberties(loc))\n\n\ndef minimax_decision(gameState, depth):\n    \"\"\" Return the move along a branch of the game tree that\n    has the best possible value.  A move is a pair of coordinates\n    in (column, row) order corresponding to a legal move for\n    the searching player.\n    \n    You can ignore the special case of calling this function\n    from a terminal state.\n    \"\"\"\n    best_score = float(\"-inf\")\n    best_move = None\n    for a in gameState.actions():\n        # call has been updated with a depth limit\n        v = min_value(gameState.result(a), depth - 1)\n        if v > best_score:\n            best_score = v\n            best_move = a\n    return best_move\n\n\ndef min_value(gameState, depth):\n    \"\"\" Return the value for a win (+1) if the game is over,\n    otherwise return the minimum value over all legal child\n    nodes.\n    \"\"\"\n    if gameState.terminal_test():\n        return gameState.utility(0)\n    \n    if depth <= 0:\n        return my_moves(gameState)\n    \n    v = float(\"inf\")\n    for a in gameState.actions():\n        # the depth should be decremented by 1 on each call\n        v = min(v, max_value(gameState.result(a), depth - 1))\n    return v\n\n\ndef max_value(gameState, depth):\n    \"\"\" Return the value for a loss (-1) if the game is over,\n    otherwise return the maximum value over all legal child\n    nodes.\n    \"\"\"\n    if gameState.terminal_test():\n        return gameState.utility(0)\n    \n    if depth <= 0:\n        return my_moves(gameState)\n    \n    v = float(\"-inf\")\n    for a in gameState.actions():\n        # the depth should be decremented by 1 on each call\n        v = max(v, min_value(gameState.result(a), depth - 1))\n    return v\n",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 193990,
          "key": "54105585920923",
          "title": "Quiescent Search",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54105585920923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 193621,
              "key": "5410558592",
              "title": "Quiescent Search",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "zpZf9TmI1NY",
                "china_cdn_id": "zpZf9TmI1NY.mp4"
              }
            },
            {
              "id": 263279,
              "key": "5a4fc4e0-f680-458f-8100-d84b8b7a10c1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[1:20] The final score of terminal board states that result in a win should be +100 in the slide rather than +1. The upper limit is arbitrary except that it must be larger than the maximum value of the evaluation heuristic, which is +5 in this case. (The value of the terminal states is defined at 0:42 of the video.) ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 194206,
          "key": "54093287000923",
          "title": "A Problem",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54093287000923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 193872,
              "key": "5409328700",
              "title": "A Problem",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "UP3v66znF7I",
                "china_cdn_id": "UP3v66znF7I.mp4"
              }
            }
          ]
        },
        {
          "id": 193991,
          "key": "54105585930923",
          "title": "Iterative Deepening",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54105585930923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 193622,
              "key": "5410558593",
              "title": "Iterative Deepening",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "Here are a few more resources to further your understanding of Iterative Deepening:\n\n* University of British Columbia's [slides](https://www.cs.ubc.ca/~hutter/teaching/cpsc322/2-Search6-final.pdf) introducing the topic.\n* 3.4.5 of Russel, Norvig\n* A [set of videos](http://movingai.com/dfid.html) showing visually how Iterative Deepening is different from DFS in practice.",
              "video": {
                "youtube_id": "vy5wR-gk_Js",
                "china_cdn_id": "vy5wR-gk_Js.mp4"
              }
            }
          ]
        },
        {
          "id": 193989,
          "key": "54105585940923",
          "title": "Understanding Exponential Time",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54105585940923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 193619,
              "key": "5410558594",
              "title": "Understanding Exponential Time",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "i4lD5p1vNtk",
                "china_cdn_id": "i4lD5p1vNtk.mp4"
              }
            }
          ]
        },
        {
          "id": 194135,
          "key": "54475991360923",
          "title": "Exponential b=3",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54475991360923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 193786,
              "key": "5447599136",
              "title": "Exponential b=3",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "5447599136",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "HvrVY9RtwDU",
                  "china_cdn_id": "HvrVY9RtwDU.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Exponential b=3",
                "alt_text": null,
                "background_image": "//lh3.googleusercontent.com/hd9woRzeh7pIOlD8ak0a2ThqMzJXko6QE_-xBUYK7bpO6yqdLSRXMJlMkNebsRUpRMXDM5YvWc1C9JhT21c=s0#w=1920&h=1080",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5447599136",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "5447599138",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric1",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.06,
                      "x": 0.8373402431421446,
                      "y": 0.22935144124168513
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric2",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.06,
                      "x": 0.9229465399002493,
                      "y": 0.22775776053215077
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric3",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.06,
                      "x": 0.8375740336658354,
                      "y": 0.389689578713969
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric4",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.06,
                      "x": 0.9227517144638404,
                      "y": 0.39440133037694014
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric5",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.06,
                      "x": 0.8368336970074813,
                      "y": 0.5534575942350333
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric6",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.06,
                      "x": 0.9250701371571073,
                      "y": 0.5565410199556541
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric7",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.06,
                      "x": 0.8381585099750624,
                      "y": 0.7203436807095344
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric8",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.06,
                      "x": 0.9244661783042394,
                      "y": 0.7175027716186253
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric9",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.06,
                      "x": 0.8385091957605985,
                      "y": 0.8744803215077606
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric10",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.06,
                      "x": 0.9253234102244389,
                      "y": 0.871015798226164
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "wcymdZfVo3U",
                  "china_cdn_id": "wcymdZfVo3U.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 194207,
          "key": "54093287010923",
          "title": "Varying the Branching Factor",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54093287010923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 193873,
              "key": "5409328701",
              "title": "Varying the Branching Factor",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "-SwomcrNuQA",
                "china_cdn_id": "-SwomcrNuQA.mp4"
              }
            }
          ]
        },
        {
          "id": 624551,
          "key": "aef1b9d9-f3a3-462c-a14d-a469002cdb89",
          "title": "Coding: Iterative Deepening",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "aef1b9d9-f3a3-462c-a14d-a469002cdb89",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 624562,
              "key": "22766d45-ee67-4ed4-8b69-03cb0bd617c9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Iterative Deepening\n---\nIterative deepening is a search technique that allows minimax-style search functions to return an approximate solution when computational resources are bounded. The basic idea is to start with a small depth-limited search, and grow the depth limit until the resource limit (usually search time) expires.\n\nIn the quiz below, you'll implement the `get_action()` function, which should wrap calls to the `minimax.minimax_decision` function to perform \"iterative deepening\" depth limited search. Start with a depth of 1 (the root node itself is a depth of 0), and call the decision function for each depth value up to (and including) the depth limit.\n",
              "instructor_notes": ""
            },
            {
              "id": 624573,
              "key": "df8202e9-eff9-4349-b3ea-6a5a04f76db9",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "df8202e9-eff9-4349-b3ea-6a5a04f76db9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "Iterative Deepening",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5488960221085696",
                "initial_code_files": [
                  {
                    "text": "\nfrom minimax import minimax_decision\n\ndef get_action(gameState, depth_limit):\n    # TODO: Implement a function that calls minimax_decision\n    # for each depth from 1...depth_limit (inclusive of both endpoints)\n    pass",
                    "name": "search.py"
                  },
                  {
                    "text": "\n# DO NOT MODIFY THE PLAYER ID\nplayer_id = 0\n\ndef my_moves(gameState):\n    loc = gameState._player_locations[player_id]\n    return len(gameState.liberties(loc))\n\n\ndef minimax_decision(gameState, depth):\n    \"\"\" Return the move along a branch of the game tree that\n    has the best possible value.  A move is a pair of coordinates\n    in (column, row) order corresponding to a legal move for\n    the searching player.\n    \n    You can ignore the special case of calling this function\n    from a terminal state.\n    \"\"\"\n    best_score = float(\"-inf\")\n    best_move = None\n    for a in gameState.actions():\n        # call has been updated with a depth limit\n        v = min_value(gameState.result(a), depth - 1)\n        if v > best_score:\n            best_score = v\n            best_move = a\n    return best_move\n\n\ndef min_value(gameState, depth):\n    \"\"\" Return the value for a win (+1) if the game is over,\n    otherwise return the minimum value over all legal child\n    nodes.\n    \"\"\"\n    if gameState.terminal_test():\n        return gameState.utility(0)\n    \n    if depth <= 0:\n        return my_moves(gameState)\n    \n    v = float(\"inf\")\n    for a in gameState.actions():\n        # the depth should be decremented by 1 on each call\n        v = min(v, max_value(gameState.result(a), depth - 1))\n    return v\n\n\ndef max_value(gameState, depth):\n    \"\"\" Return the value for a loss (-1) if the game is over,\n    otherwise return the maximum value over all legal child\n    nodes.\n    \"\"\"\n    if gameState.terminal_test():\n        return gameState.utility(0)\n    \n    if depth <= 0:\n        return my_moves(gameState)\n    \n    v = float(\"-inf\")\n    for a in gameState.actions():\n        # the depth should be decremented by 1 on each call\n        v = max(v, min_value(gameState.result(a), depth - 1))\n    return v\n",
                    "name": "minimax.py"
                  },
                  {
                    "text": "\n# Please use this implementation for compatability with the test cases\n\nfrom copy import deepcopy\n\ncall_counter = 0\nxlim, ylim = 3, 2  # board dimensions\n\n# The eight movement directions possible for a chess queen\nRAYS = [(1, 0), (1, -1), (0, -1), (-1, -1),\n        (-1, 0), (-1, 1), (0, 1), (1, 1)]\n\n\nclass GameState:\n    \"\"\"\n    Attributes\n    ----------\n    _board: list(list)\n        Represent the board with a 2d array _board[x][y]\n        where open spaces are 0 and closed spaces are 1\n    \n    _parity: bool\n        Keep track of active player initiative (which\n        player has control to move) where 0 indicates that\n        player one has initiative and 1 indicates player 2\n    \n    _player_locations: list(tuple)\n        Keep track of the current location of each player\n        on the board where position is encoded by the\n        board indices of their last move, e.g., [(0, 0), (1, 0)]\n        means player 1 is at (0, 0) and player 2 is at (1, 0)\n    \"\"\"\n    def __init__(self):\n        self._board = [[0] * ylim for _ in range(xlim)]\n        self._board[-1][-1] = 1  # block lower-right corner\n        self._parity = 0\n        self._player_locations = [None, None]\n        \n    def actions(self):\n        \"\"\" Return a list of legal actions for the active player \"\"\"\n        return self.liberties(self._player_locations[self._parity])\n    \n    def player(self):\n        \"\"\" Return the id of the active player \"\"\"\n        return self._parity\n    \n    def result(self, action):\n        \"\"\" Return a new state that results from applying the given\n        action in the current state\n        \"\"\"\n        assert action in self.actions(), \"Attempted forecast of illegal move\"\n        newBoard = deepcopy(self)\n        newBoard._board[action[0]][action[1]] = 1\n        newBoard._player_locations[self._parity] = action\n        newBoard._parity ^= 1\n        return newBoard\n    \n    def terminal_test(self):\n        \"\"\" return True if the current state is terminal,\n        and False otherwise\n        \n        Hint: an Isolation state is terminal if _either_\n        player has no remaining liberties (even if the\n        player is not active in the current state)\n        \"\"\"\n        global call_counter\n        call_counter += 1\n        return (not self._has_liberties(self._parity)\n            or not self._has_liberties(1 - self._parity))\n\n    def utility(self, player_id):\n        \"\"\" return +inf if the game is terminal and the\n        specified player wins, return -inf if the game\n        is terminal and the specified player loses, and\n        return 0 if the game is not terminal\n        \"\"\"\n        if not self.terminal_test(): return 0\n        player_id_is_active = (player_id == self.player())\n        active_has_liberties = self._has_liberties(self.player())\n        active_player_wins = (active_has_liberties == player_id_is_active)\n        return float(\"inf\") if active_player_wins else float(\"-inf\")\n    \n    def liberties(self, loc):\n        \"\"\" Return a list of all open cells in the\n        neighborhood of the specified location.  The list \n        should include all open spaces in a straight line\n        along any row, column or diagonal from the current\n        position. (Tokens CANNOT move through obstacles\n        or blocked squares in queens Isolation.)\n        \"\"\"\n        if loc is None: return self._get_blank_spaces()\n        moves = []\n        for dx, dy in RAYS:  # check each movement direction\n            _x, _y = loc\n            while 0 <= _x + dx < xlim and 0 <= _y + dy < ylim:\n                _x, _y = _x + dx, _y + dy\n                if self._board[_x][_y]:  # stop at any blocked cell\n                    break\n                moves.append((_x, _y))\n        return moves\n    \n    def _has_liberties(self, player_id):\n        \"\"\" Check to see if the specified player has any liberties \"\"\"\n        return any(self.liberties(self._player_locations[player_id]))\n\n    def _get_blank_spaces(self):\n        \"\"\" Return a list of blank spaces on the board.\"\"\"\n        return [(x, y) for y in range(ylim) for x in range(xlim)\n                if self._board[x][y] == 0]",
                    "name": "gamestate.py"
                  },
                  {
                    "text": "\nimport search\nimport gamestate as game\n\n\n# Test the depth limit by checking the number of nodes visited\n# -- recall that minimax visits every node in the search tree,\n# so if we search depth one on an empty board then minimax should\n# visit the sum of each sub-tree\ndepth_limit = 2\nexpected_node_count = 30\nrootNode = game.GameState()\nsearch.get_action(rootNode, depth_limit)\n\nprint(\"Expected node count: {}\".format(expected_node_count))\nprint(\"Your node count: {}\".format(game.call_counter))\n\nif game.call_counter == expected_node_count:\n    print(\"That's right! Looks like your depth limit is working!\")\nelse:\n    print(\"Uh oh...looks like there may be a problem.\")\n",
                    "name": "testcode.py"
                  },
                  {
                    "text": "\nfrom minimax import minimax_decision\n\ndef get_action(gameState, depth_limit):\n    # Turns out \"iterative deepening\" is just a for loop...\n    best_move = None\n    for depth in range(1, depth_limit+1):\n        best_move = minimax_decision(gameState, depth)\n    return best_move\n",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 193890,
          "key": "54105585950923",
          "title": "Horizon Effect",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54105585950923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 193507,
              "key": "5410558595",
              "title": "Horizon Effect",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "3gkCpeU-3Wc",
                "china_cdn_id": "3gkCpeU-3Wc.mp4"
              }
            }
          ]
        },
        {
          "id": 194059,
          "key": "54787685380923",
          "title": "Horizon Effect (Contd.)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54787685380923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 193701,
              "key": "5478768538",
              "title": "Horizon Effect (Contd.)",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "Ph76X98ieck",
                "china_cdn_id": "Ph76X98ieck.mp4"
              }
            }
          ]
        },
        {
          "id": 193886,
          "key": "54475991400923",
          "title": "Good Evaluation Functions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54475991400923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 193504,
              "key": "5447599140",
              "title": "Good Evaluation Functions",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "5447599140",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "iUS_j66XmMU",
                  "china_cdn_id": "iUS_j66XmMU.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Good Evaluation Functions",
                "alt_text": null,
                "background_image": "//lh3.googleusercontent.com/3PtCNXVmxvs5QmJOnAOen-HfWIp_B2xcYa0IEp2mkj-Hj2gLBUI96fGhJ70avxeA8u1cnSEr7HFK5x1Y6g=s0#w=1920&h=1080",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5447599140",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "5447599142",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check1",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.2856725374064838,
                      "y": 0.26087860310421285
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check2",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.28789354738154616,
                      "y": 0.3920108093126386
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check3",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.2849322007481297,
                      "y": 0.5503395232815964
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check4",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.28781561720698257,
                      "y": 0.7593195676274944
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "Hizo0Dr0NZ0",
                  "china_cdn_id": "Hizo0Dr0NZ0.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 193887,
          "key": "54105585960923",
          "title": "Evaluating Evaluation Functions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54105585960923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 193503,
              "key": "5410558596",
              "title": "Evaluating Evaluation Functions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "Ng43Pq0-CLo",
                "china_cdn_id": "Ng43Pq0-CLo.mp4"
              }
            }
          ]
        },
        {
          "id": 193944,
          "key": "54105585970923",
          "title": "Alpha-Beta Pruning",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54105585970923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 193566,
              "key": "5410558597",
              "title": "Alpha-Beta Pruning",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "2_g9Kbmsqn0",
                "china_cdn_id": "2_g9Kbmsqn0.mp4"
              }
            },
            {
              "id": 418703,
              "key": "9208362d-52d3-457b-a027-5fc5841f391a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## The Alpha Beta Search Algorithm",
              "instructor_notes": ""
            },
            {
              "id": 418699,
              "key": "dae5fac9-1714-426e-ac8e-f97486ea90e6",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/October/59d56686_alpha-beta-search/alpha-beta-search.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/dae5fac9-1714-426e-ac8e-f97486ea90e6",
              "caption": "",
              "alt": "",
              "width": 459,
              "height": 590,
              "instructor_notes": null
            },
            {
              "id": 418713,
              "key": "b7e284e6-45be-4221-ad71-ceeaa52d8094",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "This video introduces the concept of alpha-beta pruning which modifies the minimax algorithm by introducing two new variables: α -- the maximum lower bound of the minimax value -- and β -- the minimum upper bound of the minimax value. In other words: at every state in the game tree α represents the guaranteed worst-case score that the MAX player could achieve, and β represents the guaranteed worst-case score that the MIN player could achieve.\n\nThe estimates of α are only updated in each MAX node, while β is only updated in each MIN node. If the estimate of the upper bound is ever lower than the estimate of the lower bound in any state, then the search can be cut off because there are no values between the upper and lower bounds. Practically this means that your agent could do better by making a different move earlier in the game tree to avoid the pruned state.\n\nImplementing alpha-beta pruning in minimax only adds the two new variables (alpha & beta), and adds a conditional branch to the MIN and MAX nodes to break and return the appropriate bound when a state is pruned. (See the pseudocode above & compare with the [minimax](https://github.com/aimacode/aima-pseudocode/blob/master/md/Minimax-Decision.md) algorithm.)\n\nThere's one more difference you'll notice between minimax and alpha-beta: the alpha-beta search function seems to call the `max_value()`helper from the root node, while minimax calls the `min_value()`helper. But the pseudocode for alpha-beta search is just hiding some additional complexity: calling `max_value()` returns the score of the best branch -- but it doesn't tell you what the best branch is. You can implement the algorithm just like the minimax-decision function if you modify it to update alpha between branches.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 194002,
          "key": "53956591960923",
          "title": "Alpha-Beta Pruning Quiz 1",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "53956591960923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 193636,
              "key": "5395659196",
              "title": "Alpha-Beta Pruning Quiz 1",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "5395659196",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "X0pMjJj7Lig",
                  "china_cdn_id": "X0pMjJj7Lig.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Alpha-Beta Pruning Quiz 1",
                "alt_text": null,
                "background_image": "//lh3.googleusercontent.com/1Tn8iljOpQq5jGeKWXnBapvz19CG7DCdGowCR4i7cP5GjOYnd5JKGCoRmhu2AqgIICnh47CKD8oSF-ywAIc=s0#w=1920&h=1080",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5395659196",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "5395659198",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check1",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.3833580112219451,
                      "y": 0.3026261086474501
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check2",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.544225374064838,
                      "y": 0.3016906873614191
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check3",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.2738466334164589,
                      "y": 0.5547394678492239
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check4",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.3460684226932668,
                      "y": 0.5535615299334812
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check5",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.5654223815461347,
                      "y": 0.5428561529933481
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check6",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.6405275872817955,
                      "y": 0.5424404101995566
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check7",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.21565227556109726,
                      "y": 0.7761571507760532
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check8",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.25629286159601,
                      "y": 0.7748059866962306
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check9",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.36428460099750626,
                      "y": 0.7748406319290465
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check10",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.4012429862842893,
                      "y": 0.7730044345898004
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check11",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.5073838840399002,
                      "y": 0.7742863082039911
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check12",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.5471867206982544,
                      "y": 0.7733508869179601
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check13",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.6592113466334164,
                      "y": 0.7809035476718403
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check14",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.6956631857855362,
                      "y": 0.7796563192904656
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "vsTBPFAgxLY",
                  "china_cdn_id": "vsTBPFAgxLY.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 193881,
          "key": "54475991480923",
          "title": "Alpha-Beta Pruning Quiz 2",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54475991480923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 193496,
              "key": "5447599148",
              "title": "Alpha-Beta Pruning Quiz 2",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "Note the reordering allowed is only swapping siblings of a given parent (i.e. you can't give a node a new parent).\n\nOriginal tree:\n\n[![Original tree](https://s3.amazonaws.com/content.udacity-data.com/courses/ud954/images/Game-Playing/Alpha-Beta-Pruning-Quiz-2_original.png)](https://s3.amazonaws.com/content.udacity-data.com/courses/ud954/images/Game-Playing/Alpha-Beta-Pruning-Quiz-2_original.png)\n\n**Original tree**:\n**Instructions**:\n- Start by re-ordering the leaf nodes. Note that they must be numbers from the leaf nodes in the original tree.\n- In the non-leaf nodes, you can enter just a number (e.g. \"5\") or a limit (e.g. \"<=5\" or \">=5\"), depending on the information available when pruning.\n**Hint**: Try to make small changes, e.g. swapping two sibling nodes at the leaf level - if that doesn't enable more pruning, revert back, and try swapping at the next level up.",
              "user_state": {
                "node_key": "5447599148",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "b6_1wSgs-2E",
                  "china_cdn_id": "b6_1wSgs-2E.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Alpha-Beta Pruning Quiz 2",
                "alt_text": "",
                "background_image": "//lh3.googleusercontent.com/gi2XHoESQNmenR_KfJRMODHJ8XLF2AdSL1O4LqI4_rlU7UDAYaDVG7CdV64of6tLE45t4fCFt6bY-PkHWtk=s0#w=1920&h=1080",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5447599148",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "5447599150",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric1",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07760532150776053,
                      "width": 0.04987531172069826,
                      "x": 0.18907808603491272,
                      "y": 0.880855044345898
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric2",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07317073170731707,
                      "width": 0.048628428927680795,
                      "x": 0.26336502493765584,
                      "y": 0.8793652993348116
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric3",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07760532150776053,
                      "width": 0.04987531172069826,
                      "x": 0.33642456359102246,
                      "y": 0.878014135254989
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric4",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07760532150776053,
                      "width": 0.05112219451371571,
                      "x": 0.4085684226932668,
                      "y": 0.8771133592017738
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric5",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07538802660753881,
                      "width": 0.04987531172069826,
                      "x": 0.48269950124688277,
                      "y": 0.8780834257206208
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric6",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07538802660753881,
                      "width": 0.048628428927680795,
                      "x": 0.5564604114713217,
                      "y": 0.8770440687361419
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric7",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07538802660753881,
                      "width": 0.04738154613466334,
                      "x": 0.6302408042394015,
                      "y": 0.8752771618625277
                    }
                  },
                  {
                    "group": null,
                    "initial_value": null,
                    "label": null,
                    "marker": "numeric8",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07538802660753881,
                      "width": 0.05112219451371571,
                      "x": 0.7012741583541147,
                      "y": 0.8769054878048781
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "math1",
                    "model": "MathInputWidget",
                    "is_text_area": false,
                    "tabindex": 1,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.23546602244389028,
                      "y": 0.7113012749445676
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "math2",
                    "model": "MathInputWidget",
                    "is_text_area": false,
                    "tabindex": 2,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.37786393391521195,
                      "y": 0.7100540465631929
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "math3",
                    "model": "MathInputWidget",
                    "is_text_area": false,
                    "tabindex": 3,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.5201449501246883,
                      "y": 0.708910753880266
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "math4",
                    "model": "MathInputWidget",
                    "is_text_area": false,
                    "tabindex": 4,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.672069825436409,
                      "y": 0.7081139135254989
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "math5",
                    "model": "MathInputWidget",
                    "is_text_area": false,
                    "tabindex": 5,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.3077462593516209,
                      "y": 0.4451219512195122
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "math6",
                    "model": "MathInputWidget",
                    "is_text_area": false,
                    "tabindex": 6,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.5990492518703242,
                      "y": 0.4201080931263858
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "math7",
                    "model": "MathInputWidget",
                    "is_text_area": false,
                    "tabindex": 7,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.03740648379052369,
                      "x": 0.4511377805486284,
                      "y": 0.20839107538802662
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check1",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": 8,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.22677680798004987,
                      "y": 0.8022796563192904
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check2",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": 9,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.26266365336658354,
                      "y": 0.8026953991130821
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check3",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": 10,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.3726426122194514,
                      "y": 0.799785199556541
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check4",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": 11,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.4058798316708229,
                      "y": 0.8026953991130821
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check5",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": 12,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.5173589463840399,
                      "y": 0.8013442350332595
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check6",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": 13,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.5481024002493765,
                      "y": 0.800789911308204
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check7",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": 14,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.6626207917705735,
                      "y": 0.8001662971175166
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check8",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": 15,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.698741427680798,
                      "y": 0.8001662971175166
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check9",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": 16,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.2832761845386534,
                      "y": 0.586924889135255
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check10",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": 17,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.3534523067331671,
                      "y": 0.5853312084257206
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check11",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": 18,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.5704293952618454,
                      "y": 0.5731014412416852
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check12",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": 19,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.6441708229426434,
                      "y": 0.5711613082039911
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check13",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": 20,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.403970542394015,
                      "y": 0.3231360864745011
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check14",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": 21,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.536783042394015,
                      "y": 0.32254711751662973
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "3fzETdaSGfA",
                  "china_cdn_id": "3fzETdaSGfA.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 624552,
          "key": "eb37eb33-f9fe-4a46-9218-e0ff0e8afd63",
          "title": "Coding: Alpha-Beta Pruning",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "eb37eb33-f9fe-4a46-9218-e0ff0e8afd63",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 624572,
              "key": "69a82ee1-2b85-4d43-9de3-673a3c6a8a82",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Alpha-Beta Pruning\n---\nThe last technique we'll cover is alpha-beta pruning, which allows the agent to avoid searching nodes that cannot lead to better outcomes than what they've already searched by keeping track of the upper and lower bounds of the value for each branch. The lower bound is called alpha, and the upper bound is called beta. \n\nThe alpha-beta algorithm is shown below. In the quiz that follows, you will modify the existing minimax implementation to perform alpha-beta pruning.\n\n**NOTE:** We have removed the depth-limiting search and are not using iterative deepening in this quiz. You can trivially modify alpha-beta search to use both, just as you did before with minimax.",
              "instructor_notes": ""
            },
            {
              "id": 624575,
              "key": "b826d8c4-2f16-4d78-8d52-b2471adf77b4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/May/5aefbd57_alpha-beta-search/alpha-beta-search.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b826d8c4-2f16-4d78-8d52-b2471adf77b4",
              "caption": "",
              "alt": "",
              "width": 452,
              "height": 579,
              "instructor_notes": null
            },
            {
              "id": 624576,
              "key": "1484085d-68e8-4175-9281-2b5ba0f836ab",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "1484085d-68e8-4175-9281-2b5ba0f836ab",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "Alpha Beta Search",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5774466091712512",
                "initial_code_files": [
                  {
                    "text": "\ndef alpha_beta_search(gameState):\n    \"\"\" Return the move along a branch of the game tree that\n    has the best possible value.  A move is a pair of coordinates\n    in (column, row) order corresponding to a legal move for\n    the searching player.\n    \n    You can ignore the special case of calling this function\n    from a terminal state.\n    \"\"\"\n    alpha = float(\"-inf\")\n    beta = float(\"inf\")\n    best_score = float(\"-inf\")\n    best_move = None\n    for a in gameState.actions():\n        v = min_value(gameState.result(a))\n        if v > best_score:\n            best_score = v\n            best_move = a\n    return best_move\n\n# TODO: modify the function signature to accept an alpha and beta parameter\ndef min_value(gameState):\n    \"\"\" Return the value for a win (+1) if the game is over,\n    otherwise return the minimum value over all legal child\n    nodes.\n    \"\"\"\n    if gameState.terminal_test():\n        return gameState.utility(0)\n    \n    v = float(\"inf\")\n    for a in gameState.actions():\n        # TODO: modify the call to max_value()\n        v = min(v, max_value(gameState.result(a)))\n        # TODO: update the value bound\n    return v\n\n# TODO: modify the function signature to accept an alpha and beta parameter\ndef max_value(gameState):\n    \"\"\" Return the value for a loss (-1) if the game is over,\n    otherwise return the maximum value over all legal child\n    nodes.\n    \"\"\"\n    if gameState.terminal_test():\n        return gameState.utility(0)\n    \n    v = float(\"-inf\")\n    for a in gameState.actions():\n        # TODO: modify the call to min_value()\n        v = max(v, min_value(gameState.result(a)))\n        # TODO: update the value bound\n    return v\n",
                    "name": "minimax.py"
                  },
                  {
                    "text": "\n# Please use this implementation for compatability with the test cases\n\nfrom copy import deepcopy\n\ncall_counter = 0\nxlim, ylim = 3, 2  # board dimensions\n\n# The eight movement directions possible for a chess queen\nRAYS = [(1, 0), (1, -1), (0, -1), (-1, -1),\n        (-1, 0), (-1, 1), (0, 1), (1, 1)]\n\n\nclass GameState:\n    \"\"\"\n    Attributes\n    ----------\n    _board: list(list)\n        Represent the board with a 2d array _board[x][y]\n        where open spaces are 0 and closed spaces are 1\n    \n    _parity: bool\n        Keep track of active player initiative (which\n        player has control to move) where 0 indicates that\n        player one has initiative and 1 indicates player 2\n    \n    _player_locations: list(tuple)\n        Keep track of the current location of each player\n        on the board where position is encoded by the\n        board indices of their last move, e.g., [(0, 0), (1, 0)]\n        means player 1 is at (0, 0) and player 2 is at (1, 0)\n    \"\"\"\n    def __init__(self):\n        self._board = [[0] * ylim for _ in range(xlim)]\n        self._board[-1][-1] = 1  # block lower-right corner\n        self._parity = 0\n        self._player_locations = [None, None]\n        \n    def actions(self):\n        \"\"\" Return a list of legal actions for the active player \"\"\"\n        return self.liberties(self._player_locations[self._parity])\n    \n    def player(self):\n        \"\"\" Return the id of the active player \"\"\"\n        return self._parity\n    \n    def result(self, action):\n        \"\"\" Return a new state that results from applying the given\n        action in the current state\n        \"\"\"\n        assert action in self.actions(), \"Attempted forecast of illegal move\"\n        newBoard = deepcopy(self)\n        newBoard._board[action[0]][action[1]] = 1\n        newBoard._player_locations[self._parity] = action\n        newBoard._parity ^= 1\n        return newBoard\n    \n    def terminal_test(self):\n        \"\"\" return True if the current state is terminal,\n        and False otherwise\n        \n        Hint: an Isolation state is terminal if _either_\n        player has no remaining liberties (even if the\n        player is not active in the current state)\n        \"\"\"\n        global call_counter\n        call_counter += 1\n        return (not self._has_liberties(self._parity)\n            or not self._has_liberties(1 - self._parity))\n\n    def utility(self, player_id):\n        \"\"\" return +inf if the game is terminal and the\n        specified player wins, return -inf if the game\n        is terminal and the specified player loses, and\n        return 0 if the game is not terminal\n        \"\"\"\n        if not self.terminal_test(): return 0\n        player_id_is_active = (player_id == self.player())\n        active_has_liberties = self._has_liberties(self.player())\n        active_player_wins = (active_has_liberties == player_id_is_active)\n        return float(\"inf\") if active_player_wins else float(\"-inf\")\n    \n    def liberties(self, loc):\n        \"\"\" Return a list of all open cells in the\n        neighborhood of the specified location.  The list \n        should include all open spaces in a straight line\n        along any row, column or diagonal from the current\n        position. (Tokens CANNOT move through obstacles\n        or blocked squares in queens Isolation.)\n        \"\"\"\n        if loc is None: return self._get_blank_spaces()\n        moves = []\n        for dx, dy in RAYS:  # check each movement direction\n            _x, _y = loc\n            while 0 <= _x + dx < xlim and 0 <= _y + dy < ylim:\n                _x, _y = _x + dx, _y + dy\n                if self._board[_x][_y]:  # stop at any blocked cell\n                    break\n                moves.append((_x, _y))\n        return moves\n    \n    def _has_liberties(self, player_id):\n        \"\"\" Check to see if the specified player has any liberties \"\"\"\n        return any(self.liberties(self._player_locations[player_id]))\n\n    def _get_blank_spaces(self):\n        \"\"\" Return a list of blank spaces on the board.\"\"\"\n        return [(x, y) for y in range(ylim) for x in range(xlim)\n                if self._board[x][y] == 0]",
                    "name": "gamestate.py"
                  },
                  {
                    "text": "\nimport minimax\nimport gamestate as game\n\n\n# Test the depth limit by checking the number of nodes visited\n# -- recall that minimax visits every node in the search tree,\n# so if we search depth one on an empty board then minimax should\n# visit each of the five open spaces\nexpected_node_count = 55\nrootNode = game.GameState()\nminimax.alpha_beta_search(rootNode)\n\nprint(\"Expected node count: {}\".format(expected_node_count))\nprint(\"Your node count: {}\".format(game.call_counter))\n\nif game.call_counter == expected_node_count:\n    print(\"That's right! Looks like your alpha-beta pruning is working!\")\nelse:\n    print(\"Uh oh...looks like there may be a problem.\")\n",
                    "name": "testcode.py"
                  },
                  {
                    "text": "\ndef alpha_beta_search(gameState):\n    \"\"\" Return the move along a branch of the game tree that\n    has the best possible value.  A move is a pair of coordinates\n    in (column, row) order corresponding to a legal move for\n    the searching player.\n    \n    You can ignore the special case of calling this function\n    from a terminal state.\n    \"\"\"\n    alpha = float(\"-inf\")\n    beta = float(\"inf\")\n    best_score = float(\"-inf\")\n    best_move = None\n    for a in gameState.actions():\n        v = min_value(gameState.result(a), alpha, beta)\n        alpha = max(alpha, v)\n        if v > best_score:\n            best_score = v\n            best_move = a\n    return best_move\n\n# TODO: modify the function signature to accept an alpha and beta parameter\ndef min_value(gameState, alpha, beta):\n    \"\"\" Return the value for a win (+1) if the game is over,\n    otherwise return the minimum value over all legal child\n    nodes.\n    \"\"\"\n    if gameState.terminal_test():\n        return gameState.utility(0)\n    \n    v = float(\"inf\")\n    for a in gameState.actions():\n        v = min(v, max_value(gameState.result(a), alpha, beta))\n        if v <= alpha:\n            return v\n        beta = min(beta, v)\n    return v\n\n# TODO: modify the function signature to accept an alpha and beta parameter\ndef max_value(gameState, alpha, beta):\n    \"\"\" Return the value for a loss (-1) if the game is over,\n    otherwise return the maximum value over all legal child\n    nodes.\n    \"\"\"\n    if gameState.terminal_test():\n        return gameState.utility(0)\n    \n    v = float(\"-inf\")\n    for a in gameState.actions():\n        v = max(v, min_value(gameState.result(a), alpha, beta))\n        if v >= beta:\n            return v\n        alpha = max(alpha, v)\n    return v\n",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 194202,
          "key": "71221494460923",
          "title": "Solving 5x5 Isolation",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "71221494460923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 193868,
              "key": "7122149446",
              "title": "Solving 5x5 Isolation",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "IawyLVnyFf8",
                "china_cdn_id": "IawyLVnyFf8.mp4"
              }
            }
          ]
        },
        {
          "id": 624580,
          "key": "cdd01c74-768a-4d99-b2be-771864a7d45a",
          "title": "Coding: Opening Book",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "cdd01c74-768a-4d99-b2be-771864a7d45a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 624581,
              "key": "092d91da-ee92-45c0-b6ad-4bfbbd5b5d14",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Opening Book\n---\nAn opening book isn't specific to Minimax search. It's a general technique for game playing that builds on the intuitive idea that we can learn from experience which opening moves are most likely to result in a win. Opening books are usually built by analyzing a large corpus of games between expert players to find the most promising opening lines.\n\nIf you don't have a large corpus of historical matches, then you can create a corpus by either using random rollouts (or by using your agent) to play _many_ games while accumulating statistics on which opening moves are best. An opening book can be as simple as a dictionary `book = {hashable_game_state: action_to_take}` for as many pairs of game states and actions as you choose.\n\nKeep in mind that opening books are _estimates_ of the best move. It's possible for the book to learn bad moves, especially if you don't have much data or if your data is noisy. The game tree grows exponentially, so it can take an enormous number of games to collect reliable statistics on the opening moves. You can improve the quality of the estimates by incorporating more domain knowledge in the process (like the symmetries discussed for 5x5 Isolation).\n\n**NOTE:**\n- Python3 uses a secure hashing scheme that makes object hashes (generally) non-portable between runs. The game state object in the project can safely be used as a key, but for this quiz you will need to use `state.hashable` as a key.",
              "instructor_notes": ""
            },
            {
              "id": 624584,
              "key": "7a933dde-9f8b-497b-942d-a3312c64ede3",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "7a933dde-9f8b-497b-942d-a3312c64ede3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "Opening Book",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6100995141140480",
                "initial_code_files": [
                  {
                    "text": "\nimport random\n\nfrom gamestate import GameState\n\nNUM_ROUNDS = 10\n\ndef build_table(num_rounds=NUM_ROUNDS):\n    # You should run no more than `num_rounds` simulations -- the\n    # goal of this quiz is to understand one possible way to develop\n    # an opening book; not to develop a good one\n    \n    # NOTE: the GameState object is not hashable, and the python3\n    #       runtime includes security features that make object\n    #       hashes non-portable. There is a new attribute on\n    #       GameState objects in this quiz called `hashable` that\n    #       can be used as a dictionary key\n    \n    # TODO: return a table {k:v} where each k is a game state\n    #       and each v is the best action to take in that state\n    return {}",
                    "name": "openingbook.py"
                  },
                  {
                    "text": "\n# Please use this implementation for compatability with the test cases\n\nfrom copy import deepcopy\n\ncall_counter = 0\nxlim, ylim = 3, 2  # board dimensions\n\n# The eight movement directions possible for a chess queen\nRAYS = [(1, 0), (1, -1), (0, -1), (-1, -1),\n        (-1, 0), (-1, 1), (0, 1), (1, 1)]\n\n\nclass GameState:\n    \"\"\"\n    Attributes\n    ----------\n    _board: list(list)\n        Represent the board with a 2d array _board[x][y]\n        where open spaces are 0 and closed spaces are 1\n    \n    _parity: bool\n        Keep track of active player initiative (which\n        player has control to move) where 0 indicates that\n        player one has initiative and 1 indicates player 2\n    \n    _player_locations: list(tuple)\n        Keep track of the current location of each player\n        on the board where position is encoded by the\n        board indices of their last move, e.g., [(0, 0), (1, 0)]\n        means player 1 is at (0, 0) and player 2 is at (1, 0)\n    \"\"\"\n    def __init__(self):\n        self._board = [[0] * ylim for _ in range(xlim)]\n        self._board[-1][-1] = 1  # block lower-right corner\n        self._parity = 0\n        self._player_locations = [None, None]\n    \n    @property\n    def hashable(self):\n        from itertools import chain\n        return tuple(chain(*self._board)) + tuple(self._player_locations) + (self._parity, )\n        \n    def actions(self):\n        \"\"\" Return a list of legal actions for the active player \"\"\"\n        return self.liberties(self._player_locations[self._parity])\n    \n    def player(self):\n        \"\"\" Return the id of the active player \"\"\"\n        return self._parity\n    \n    def result(self, action):\n        \"\"\" Return a new state that results from applying the given\n        action in the current state\n        \"\"\"\n        assert action in self.actions(), \"Attempted forecast of illegal move\"\n        newBoard = deepcopy(self)\n        newBoard._board[action[0]][action[1]] = 1\n        newBoard._player_locations[self._parity] = action\n        newBoard._parity ^= 1\n        return newBoard\n    \n    def terminal_test(self):\n        \"\"\" return True if the current state is terminal,\n        and False otherwise\n        \n        Hint: an Isolation state is terminal if _either_\n        player has no remaining liberties (even if the\n        player is not active in the current state)\n        \"\"\"\n        global call_counter\n        call_counter += 1\n        return (not self._has_liberties(self._parity)\n            or not self._has_liberties(1 - self._parity))\n\n    def utility(self, player_id):\n        \"\"\" return +inf if the game is terminal and the\n        specified player wins, return -inf if the game\n        is terminal and the specified player loses, and\n        return 0 if the game is not terminal\n        \"\"\"\n        if not self.terminal_test(): return 0\n        player_id_is_active = (player_id == self.player())\n        active_has_liberties = self._has_liberties(self.player())\n        active_player_wins = (active_has_liberties == player_id_is_active)\n        return float(\"inf\") if active_player_wins else float(\"-inf\")\n    \n    def liberties(self, loc):\n        \"\"\" Return a list of all open cells in the\n        neighborhood of the specified location.  The list \n        should include all open spaces in a straight line\n        along any row, column or diagonal from the current\n        position. (Tokens CANNOT move through obstacles\n        or blocked squares in queens Isolation.)\n        \"\"\"\n        if loc is None: return self._get_blank_spaces()\n        moves = []\n        for dx, dy in RAYS:  # check each movement direction\n            _x, _y = loc\n            while 0 <= _x + dx < xlim and 0 <= _y + dy < ylim:\n                _x, _y = _x + dx, _y + dy\n                if self._board[_x][_y]:  # stop at any blocked cell\n                    break\n                moves.append((_x, _y))\n        return moves\n    \n    def _has_liberties(self, player_id):\n        \"\"\" Check to see if the specified player has any liberties \"\"\"\n        return any(self.liberties(self._player_locations[player_id]))\n\n    def _get_blank_spaces(self):\n        \"\"\" Return a list of blank spaces on the board.\"\"\"\n        return [(x, y) for y in range(ylim) for x in range(xlim)\n                if self._board[x][y] == 0]",
                    "name": "gamestate.py"
                  },
                  {
                    "text": "\nimport openingbook\n\nbook = openingbook.build_table(10)\n\nassert len(book) > 0, \"Your opening book is empty\"\nassert all(isinstance(k, tuple) for k in book), \\\n    \"All the keys should be `hashable`\"\nassert all(isinstance(v, tuple) and len(v) == 2 for v in book.values()), \\\n    \"All the values should be tuples of (x, y) actions\"\nprint(\"Looks like your book worked!\")\nprint(book)",
                    "name": "testcode.py"
                  },
                  {
                    "text": "\nimport random\n\nfrom gamestate import GameState\n\nNUM_ROUNDS = 10\n\ndef build_table(num_rounds=NUM_ROUNDS):\n    # Builds a table that maps from game state -> action\n    # by choosing the action that accumulates the most\n    # wins for the active player. (Note that this uses\n    # raw win counts, which are a poor statistic to\n    # estimate the value of an action; better statistics\n    # exist.)\n    from collections import defaultdict, Counter\n    book = defaultdict(Counter)\n    for _ in range(num_rounds):\n        state = GameState()\n        build_tree(state, book)\n    return {k: max(v, key=v.get) for k, v in book.items()}\n\n\ndef build_tree(state, book, depth=2):\n    if depth <= 0 or state.terminal_test():\n        return -simulate(state)\n    action = random.choice(state.actions())\n    reward = build_tree(state.result(action), book, depth - 1)\n    book[state.hashable][action] += reward\n    return -reward\n\n\ndef simulate(state):\n    player_id = state._parity\n    while not state.terminal_test():\n        state = state.result(random.choice(state.actions()))\n    return -1 if state.utility(player_id) < 0 else 1\n",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 194204,
          "key": "54308329090923",
          "title": "Thad’s Asides",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54308329090923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 193870,
              "key": "5430832909",
              "title": "Thad’s Asides",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "**Thad's Asides**: AI = Clever Solutions to Exponential Problems",
              "video": {
                "youtube_id": "8BiZifMsF0o",
                "china_cdn_id": "8BiZifMsF0o.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}