WEBVTT
Kind: captions
Language: zh-CN

00:00:00.220 --> 00:00:03.860
答案是不可以 agent 找不到任何解决方案

00:00:03.859 --> 00:00:06.799
因为 Bucharest 并没有显示在地图上

00:00:06.799 --> 00:00:10.939
因此 agent 也找不到任何到达那里的方法

00:00:10.939 --> 00:00:13.073
所以 让我们给 agent 一个更好的机会

00:00:13.073 --> 00:00:16.643
现在 我们向 agent 给出了 Romania 的完整地图

00:00:16.643 --> 00:00:18.820
起点在 Arad

00:00:19.870 --> 00:00:23.230
终点在 Bucharest

00:00:23.230 --> 00:00:28.519
agent 需要给出一系列行为

00:00:28.519 --> 00:00:30.739
根据这些行为 最终到达目的地 解决问题

00:00:30.739 --> 00:00:33.699
现在 agent 有可能解决这个问题吗

00:00:33.700 --> 00:00:34.740
答案是可以

00:00:34.740 --> 00:00:37.320
这里有很多种行动的路线、 步骤或序列

00:00:37.320 --> 00:00:40.869
能到达目的地

00:00:40.869 --> 00:00:41.769
这是其中一个

00:00:43.348 --> 00:00:48.408
从 Arad 开始 先走这步 再走这步

00:00:48.408 --> 00:00:54.530
接下来走这步 再走这步 然后走这步就可以到达目的地了

00:00:54.530 --> 00:00:57.871
这也算是这个问题的一个解决方案

00:00:57.871 --> 00:01:01.422
这些连在一起的行为序列能确保我们达成目标

00:01:01.421 --> 00:01:02.890
这些连在一起的行为序列能确保我们达成目标

00:01:02.890 --> 00:01:06.200
现在 让我们来正式的定义这个问题

00:01:06.200 --> 00:01:09.680
该问题可以分解分成若干个部分

00:01:09.680 --> 00:01:13.700
首先是 agent 的起始状态

00:01:13.700 --> 00:01:15.590
在我们的路线查询问题中

00:01:15.590 --> 00:01:19.704
起始状态为 agent 在 Arad 这个城市里

00:01:20.859 --> 00:01:28.569
接下来 是一个函数 函数名为 Actions 该函数以一个状态作为输入

00:01:28.569 --> 00:01:34.569
并且返回可能的行为的集合 这些行为是 agent 在当前状态下所能执行的

00:01:34.569 --> 00:01:35.399
在一些问题中

00:01:35.400 --> 00:01:38.830
agent 在所有状态下都拥有相同的行为

00:01:38.829 --> 00:01:39.810
在另一些问题中

00:01:39.810 --> 00:01:42.670
它们当前的行为取决于当前的状态

00:01:42.670 --> 00:01:46.689
在路线寻找问题中 行为取决于当前状态

00:01:46.689 --> 00:01:50.689
当我们在一个城市的时候 我们仅可以选择到邻近城市的路线

00:01:50.689 --> 00:01:52.929
而不能到除此之外的其它城市

00:01:52.930 --> 00:02:00.080
接下来 我们有一个叫 result 的函数 该函数的输入为一个状态和一个行为

00:02:00.079 --> 00:02:05.230
然后输出一个新的状态

00:02:06.420 --> 00:02:11.444
比如说 agent 在 Arad 这个城市

00:02:11.444 --> 00:02:15.139
这是当前状态

00:02:15.139 --> 00:02:20.409
并且 采取了沿着 E671 路线到 Timisora 的行为

00:02:20.409 --> 00:02:26.120
采取这个行为的结果是

00:02:26.120 --> 00:02:30.560
达到了一个 agent 在 Timisora 这个城市的新状态

00:02:32.960 --> 00:02:37.990
接下来 我们需要一个称之为 GoalTest 的函数

00:02:37.990 --> 00:02:43.090
输入为状态 输出为一个 Boolean 类型的值 true 或 false

00:02:43.090 --> 00:02:46.816
这会告诉我们当前状态是否是目标状态

00:02:46.816 --> 00:02:48.400
在路线查找问题中

00:02:48.400 --> 00:02:53.439
唯一的目标是到达目标城市 Bucharest

00:02:53.439 --> 00:02:56.270
除此之外的所有其它状态在 GoalTest 函数中都会返回 false

00:02:57.629 --> 00:03:02.316
最后 你还需要一个东西 就是路线开销函数 Path Cost

00:03:02.316 --> 00:03:07.710
输入为一条路径 就是一系列状态、行为、转换

00:03:08.800 --> 00:03:13.920
并且 这会返回一个数字 这就是这条路径的开销

00:03:15.199 --> 00:03:17.493
现在 对于我们将会处理的大部分问题

00:03:17.493 --> 00:03:21.500
我们都会附加 Path Cost 函数

00:03:21.500 --> 00:03:26.469
这个问题中 一条路径的总开销就是每一步开销的和

00:03:27.530 --> 00:03:28.409
因此

00:03:28.409 --> 00:03:33.980
我们将会以 Step Cost 函数来实现 Path Cost 函数

00:03:33.980 --> 00:03:38.889
Step Cost 函数的输入为一个状态

00:03:39.889 --> 00:03:45.029
一个行为和该行为的输出状态

00:03:45.030 --> 00:03:48.140
返回数字 n 表示了该行为的开销

00:03:49.250 --> 00:03:53.514
在路线查找问题中 开销可能是行驶的路程长度

00:03:53.514 --> 00:03:58.469
或者 也可能是到达目的地所要花费的时间

