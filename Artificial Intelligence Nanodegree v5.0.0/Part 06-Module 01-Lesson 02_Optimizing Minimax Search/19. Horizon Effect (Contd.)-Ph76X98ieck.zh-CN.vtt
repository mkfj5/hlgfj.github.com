WEBVTT
Kind: captions
Language: zh-CN

00:00:00.320 --> 00:00:01.650
那我们怎么办呢？

00:00:01.649 --> 00:00:04.449
唔 或许我们应该在评估函数里加一个检测功能

00:00:04.450 --> 00:00:07.450
来看下一步会不会形成隔墙 如果是

00:00:07.450 --> 00:00:10.349
那就开始计算每个玩家还可以走几步

00:00:10.349 --> 00:00:14.000
听起来不错 但这样的代价是什么呢？

00:00:14.000 --> 00:00:15.289
什么意思？

00:00:15.289 --> 00:00:19.719
评估函数本来很简单 就只需稍微计算一下

00:00:19.719 --> 00:00:24.299
现在要检测 就会变得复杂起来 因为会涉及大量统计

00:00:24.300 --> 00:00:28.600
仅仅是统计玩家可走的相邻方格数

00:00:28.600 --> 00:00:31.480
就和搜索博弈树更深层差不多

00:00:31.480 --> 00:00:33.270
而我们知道搜索深层是很耗时的

00:00:34.340 --> 00:00:35.500
更重要的是

00:00:35.500 --> 00:00:39.649
我们还使得评估函数耗时翻倍

00:00:39.649 --> 00:00:42.409
而且耗时会呈指数增长

00:00:42.409 --> 00:00:45.489
因为随着搜索的深入 分枝因子会变化

00:00:45.490 --> 00:00:49.410
哎呀 这么说永远都不该用复杂的评估函数了？

00:00:49.409 --> 00:00:51.549
这取决于游戏

00:00:51.549 --> 00:00:55.818
稍微改变一下孤立棋的规则 就能产生极大的变化

00:00:55.819 --> 00:00:59.321
是要使用简单的评估函数 进行更深入地搜索

00:00:59.320 --> 00:01:04.799
还是用复杂的评估函数 从而预见这些危险 规则一变 答案也会变的

00:01:04.799 --> 00:01:07.819
我试过不同孤立棋变体 比如让玩家像

00:01:07.819 --> 00:01:12.059
国际象棋的骑士那么玩 或允许绕过边界

00:01:12.060 --> 00:01:15.310
甚至是让玩家同时控制两个棋子

00:01:15.310 --> 00:01:19.859
这样得出的游戏策略总是让我惊喜

00:01:19.859 --> 00:01:23.599
要改动评估函数 先三思 这是很有用的

00:01:23.599 --> 00:01:27.390
要考虑评估函数是否能实现目的表现 以及要怎么应用才能更高效

