WEBVTT
Kind: captions
Language: zh-CN

00:00:00.330 --> 00:00:04.419
太好了 但等我们到了极大极小博弈树的第九层 我们要怎么做？

00:00:04.419 --> 00:00:07.209
到第九层就开始有趣起来了

00:00:07.209 --> 00:00:09.810
我们要评估第九层节点的优劣

00:00:09.810 --> 00:00:14.240
所谓优劣 就是指我们对节点多有利于计算机玩家赢得游戏的预期

00:00:14.240 --> 00:00:17.199
我们能不能创建这么个评估函数呢？ 让函数接受

00:00:17.199 --> 00:00:21.050
极大极小博弈树第九层生成的每个棋局 然后返回一个值

00:00:21.050 --> 00:00:25.149
通过这个值 我们可以比较相应节点和第九层其它节点的优劣

00:00:25.149 --> 00:00:28.259
我们也知道 要赢的唯一办法就是让计算机玩家

00:00:28.260 --> 00:00:30.270
在游戏结束时还剩步数可走

00:00:30.269 --> 00:00:33.630
或许计算机玩家应该最大化自己可以走的步数？

00:00:33.630 --> 00:00:35.030
好像有道理

00:00:35.030 --> 00:00:38.770
那我们需要这么个评估函数 函数能返回出值

00:00:38.770 --> 00:00:40.602
这些值大小取决于棋局多有利于计算机玩家

00:00:40.601 --> 00:00:44.279
有了这么个评估函数 比如函数能简单统计

00:00:44.280 --> 00:00:46.810
计算机玩家在给定节点上有多少步数

00:00:46.810 --> 00:00:49.620
玩家就能够在极大极小树上选出一些分支

00:00:49.619 --> 00:00:52.539
从而得以到达那些具备最多选择的位置上

00:00:52.539 --> 00:00:54.859
听上去真的很棒

00:00:54.859 --> 00:00:59.679
为了方便 我们把这个评估函数命名为 #my_moves (我的步数)

00:00:59.679 --> 00:01:03.100
何不在简单的五步棋盘里试试呢？

00:01:03.100 --> 00:01:04.510
看看函数的效果如何？

00:01:04.510 --> 00:01:05.010
来吧

