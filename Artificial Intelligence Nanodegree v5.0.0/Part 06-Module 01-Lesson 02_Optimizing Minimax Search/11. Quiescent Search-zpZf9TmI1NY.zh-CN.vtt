WEBVTT
Kind: captions
Language: zh-CN

00:00:00.130 --> 00:00:03.819
如果深度限制为两层 我们就会得到与三层限制完全不一样的结果

00:00:03.819 --> 00:00:07.179
对的 在第二层 会输的中间走法

00:00:07.179 --> 00:00:11.419
分值都为 3 而会赢的走法分值都较低

00:00:11.419 --> 00:00:14.050
这是不是意味着评估函数不好呢？

00:00:14.050 --> 00:00:15.440
也不尽然

00:00:15.439 --> 00:00:19.050
这可能意味着我们搜索得不够深 因而得不到好答案

00:00:19.050 --> 00:00:20.039
那我们怎么知道够不够深呢？

00:00:20.039 --> 00:00:23.469
检查的办法之一是观察极大极小值算法在每层进行了搜索后

00:00:23.469 --> 00:00:25.304
都推荐了哪些分支

00:00:25.304 --> 00:00:28.839
如果某些层得到的结果区别很大

00:00:28.839 --> 00:00:33.019
那可能就是那些层涉及到关键决策

00:00:33.020 --> 00:00:35.220
来 我们在孤立棋例局上试试这个思路

00:00:35.219 --> 00:00:39.429
继续用评估函数 #my_ moves

00:00:39.429 --> 00:00:43.140
该函数的最大分值为 5 最小分值为 0

00:00:43.140 --> 00:00:45.984
找到计算机玩家会输的分支

00:00:45.984 --> 00:00:48.250
我们就把分数 -1

00:00:48.250 --> 00:00:51.020
找到玩家会赢的分支

00:00:51.020 --> 00:00:52.220
我们就不扣分

00:00:52.219 --> 00:00:57.149
在这个孤立棋局中 第一层里 评估函数 #my_ moves

00:00:57.149 --> 00:01:00.560
会推荐中线的两种走法

00:01:00.560 --> 00:01:01.990
还有左上角的走法

00:01:01.990 --> 00:01:03.719
这些走法分值都是 4

00:01:03.719 --> 00:01:07.840
到了第二层 函数认为中线的两种走法是最佳的 分值为 3

00:01:07.840 --> 00:01:12.790
到了第三层 函数认为中线的两种走法最差

00:01:13.829 --> 00:01:18.605
继续到第四层

00:01:18.605 --> 00:01:22.609
第五层和第六层

00:01:22.609 --> 00:01:25.780
第三层之后 我们达到了静止状态

00:01:25.780 --> 00:01:28.329
也就是推荐分支已经不怎么变了

00:01:28.329 --> 00:01:29.719
所以我们知道推荐成型了

