WEBVTT
Kind: captions
Language: zh-CN

00:00:00.390 --> 00:00:04.280
要创建计算机玩家 我们还剩一个难题 那就是

00:00:04.280 --> 00:00:08.230
人类玩家能够明显看出下一步是游戏的关键

00:00:08.230 --> 00:00:11.140
但计算机玩家搜索得不够深

00:00:11.140 --> 00:00:12.780
不能意识到这个问题

00:00:12.779 --> 00:00:14.759
这个情况就叫做水平效应

00:00:15.939 --> 00:00:18.050
来看看这局孤立棋

00:00:18.050 --> 00:00:19.310
现在轮到了 O

00:00:19.309 --> 00:00:21.339
O 应该怎么走呢？

00:00:21.339 --> 00:00:23.589
恩 一旦 O 向左下走一步

00:00:23.589 --> 00:00:27.201
X 就只剩 6 步 而 O 还有 7 步

00:00:27.202 --> 00:00:29.200
那么 O 就赢了

00:00:29.199 --> 00:00:31.199
可那还得走 13 步才能知道

00:00:31.199 --> 00:00:33.089
你怎么知道的？

00:00:33.090 --> 00:00:35.160
X 会被卡在不好的那一边

00:00:35.159 --> 00:00:36.809
没有办法围堵 O

00:00:36.810 --> 00:00:39.539
两个玩家都必须有效地填满剩下的棋盘

00:00:39.539 --> 00:00:41.439
才有可能赢

00:00:41.439 --> 00:00:45.019
观察得好 但计算机玩家可能意识不到这一点

00:00:45.020 --> 00:00:48.840
记住 当我们提到每一步只能考虑两秒时

00:00:48.840 --> 00:00:52.410
我们就说计算机玩家只能往前看九步

00:00:52.409 --> 00:00:54.459
它无法预见终局

00:00:54.460 --> 00:00:57.450
但有了迭代加深 计算机玩家就可能得以搜索得更深

00:00:57.450 --> 00:01:00.510
因为临近终局 分枝因子会小很多

00:01:00.509 --> 00:01:04.500
的确 但想象一下 我们在有限时间里

00:01:04.500 --> 00:01:07.060
已经搜索到了可以搜索的倒数第二层了

00:01:07.060 --> 00:01:10.250
我们必须评估这个节点的子节

00:01:10.250 --> 00:01:14.040
那么我们的评估函数 #my_moves 会挑哪一步呢？

00:01:14.040 --> 00:01:16.090
唔 肯定不是可以赢的那一步

00:01:16.090 --> 00:01:19.060
对于可以赢的走法 评估函数返回的分值为 3 但

00:01:19.060 --> 00:01:21.570
我看到其它几种走法分值更高

00:01:21.569 --> 00:01:24.239
走到最右边是 5 分

00:01:24.239 --> 00:01:27.769
往左下斜走两格是 6 分

00:01:27.769 --> 00:01:30.379
但这么走都会输

00:01:30.379 --> 00:01:31.109
对的

00:01:31.109 --> 00:01:34.290
走到右边 O 就走到了错的分区里

00:01:34.290 --> 00:01:37.760
走到左边 O 就创建了一个步数更少的分区

