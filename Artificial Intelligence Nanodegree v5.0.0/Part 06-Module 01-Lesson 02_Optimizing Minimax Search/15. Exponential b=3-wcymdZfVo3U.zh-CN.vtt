WEBVTT
Kind: captions
Language: zh-CN

00:00:00.450 --> 00:00:01.849
答案如下

00:00:01.850 --> 00:00:02.780
在第零层

00:00:02.779 --> 00:00:08.279
博弈树有 1 个节点 迭代加深也只需访问 1 个节点

00:00:08.279 --> 00:00:11.139
在第一层 博弈树有 4 个节点

00:00:11.140 --> 00:00:12.818
迭代加深需要访问 5 个节点

00:00:12.817 --> 00:00:17.199
也就是 4 个博弈树现有的节点加上上一层的 1 个节点

00:00:17.199 --> 00:00:21.780
到了第二层 博弈树有 13 个节点 迭代加深需要访问

00:00:21.780 --> 00:00:26.609
18 个 即博弈树的 13 个加上之前的 5 个

00:00:26.609 --> 00:00:30.399
到了第三层 博弈树有 40 个节点

00:00:30.399 --> 00:00:33.729
加上 18 就等于 58 个节点 这就是迭代加深需要访问的节点数

00:00:33.729 --> 00:00:37.449
最后 到了第四层 博弈树有 121 个节点

00:00:37.450 --> 00:00:40.330
迭代加深需要访问 179 个节点

00:00:40.329 --> 00:00:44.460
这实际上小于博弈树节点数的 1.5 倍

00:00:44.460 --> 00:00:45.399
记住 在之前

00:00:45.399 --> 00:00:51.189
分枝因子为 2 时 博弈树里有 2^d+1 - 1 个节点

00:00:51.189 --> 00:00:54.128
现在 因为新的分枝因子为 3

00:00:54.128 --> 00:00:58.446
所以博弈树里有 3^d+1 - 1 除以 2 个节点

00:00:58.447 --> 00:01:01.010
我们继续推导这个公式

00:01:01.009 --> 00:01:05.640
如果分枝因子为 K 那么公式就是 K^d+1 - 1 除以 K - 1

00:01:05.640 --> 00:01:09.549
这就是博弈树的节点数

