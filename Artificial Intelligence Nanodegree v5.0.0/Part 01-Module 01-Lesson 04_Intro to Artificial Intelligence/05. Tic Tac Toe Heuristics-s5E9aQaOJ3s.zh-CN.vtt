WEBVTT
Kind: captions
Language: zh-CN

00:00:00.300 --> 00:00:02.919
这个表示法真正有趣的地方在于

00:00:02.919 --> 00:00:05.849
边缘包含了游戏的规则

00:00:05.849 --> 00:00:06.539
比如说

00:00:06.540 --> 00:00:10.629
每个现有状态能转化的下一状态数目有限

00:00:10.630 --> 00:00:11.830
你说得对

00:00:11.830 --> 00:00:14.460
这样就限制了需要考虑的步数

00:00:14.460 --> 00:00:17.359
特别是在游戏后期 棋盘满了很多

00:00:17.359 --> 00:00:20.109
但我看到一开始还是有很多节点

00:00:20.109 --> 00:00:21.519
需要扩展的

00:00:21.519 --> 00:00:22.899
这要怎么解决呢？

00:00:22.899 --> 00:00:23.939
对的

00:00:23.940 --> 00:00:27.150
在 3 乘 3 棋盘里 第一步有九种走法

00:00:27.149 --> 00:00:30.769
然后 对手就有八种走法 以此类推

00:00:30.769 --> 00:00:33.240
但有些显然就是无效走法

00:00:33.240 --> 00:00:37.560
比如这里 轮到了 O 但走这里并说不通

00:00:37.560 --> 00:00:41.300
因为这一行和这一列各有 1 个 X

00:00:41.299 --> 00:00:44.059
所以有这一步的组合是不能赢的

00:00:44.060 --> 00:00:46.150
对的 观察得很细致

00:00:46.149 --> 00:00:50.659
像这样对状态进行简单评估 从而忽略某些走法的做法

00:00:50.659 --> 00:00:52.639
就叫搜索树剪枝

00:00:52.640 --> 00:00:55.160
你还能想出其它搜索要注意的问题吗？

00:00:55.159 --> 00:00:56.459
我想想

00:00:56.460 --> 00:00:59.289
这一点呢？ 我们的对手是

00:00:59.289 --> 00:01:00.990
也想赢的人类？

00:01:00.990 --> 00:01:02.670
你说到点子上了

00:01:02.670 --> 00:01:05.040
好 所以我知道如果在这里放一个 O

00:01:05.040 --> 00:01:08.550
对手肯定会走到这里 连成一线 赢得游戏

00:01:08.549 --> 00:01:11.579
所以这么走也不好吧？

00:01:11.579 --> 00:01:14.459
这就是对抗搜索的重点了

00:01:14.459 --> 00:01:18.979
我们将学习如何用极大极小值算法把这些直觉公式化

00:01:18.980 --> 00:01:22.490
在这个算法中 轮到你时 你会努力地最大化赢得游戏的概率

00:01:22.489 --> 00:01:26.659
而轮到你的对手时 他则会努力地最小化你赢得游戏的概率

00:01:26.659 --> 00:01:31.399
这个算法很有效 因为当你认为某一步不好而排除该步时

00:01:31.400 --> 00:01:36.120
实际上是排除了所有连着这一步的可能走法

00:01:36.120 --> 00:01:39.380
在我听来 这个人工智能

00:01:39.379 --> 00:01:40.209
的定义更好些

00:01:40.209 --> 00:01:44.699
因为这能预测环境变化并根据预测来进行规划

00:01:44.700 --> 00:01:47.560
包括应对由其它智能体引起的变化

00:01:47.560 --> 00:01:48.930
但玩游戏是一回事

00:01:48.930 --> 00:01:52.080
我还是好奇 现实世界那么复杂 人工智能会如何应对呢？

