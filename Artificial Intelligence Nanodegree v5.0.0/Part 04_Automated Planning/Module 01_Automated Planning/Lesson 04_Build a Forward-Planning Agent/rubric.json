{
  "id": 1800,
  "project_id": 421,
  "upload_types": [
    "zip"
  ],
  "file_filter_regex": "\\A(?!(((.*/)?(__MACOSX|\\.git|node_modules|bower_components|jspm_packages|\\.idea|build|.ipynb_checkpoints|\\.Trash-0|logs)(\\Z|/))))((.*\\.(css|docx|gradle|htm|html|java|js|markdown|md|pdf|py|rmd|rst|sql|swift|txt|xml|yaml|yml)\\Z)|((.*/)?(README|Readme|readme|Makefile)\\Z))",
  "nomination_eligible": false,
  "stand_out": "",
  "hide_criteria": false,
  "created_at": "2018-04-09T21:47:31.048Z",
  "updated_at": "2020-03-13T19:28:48.078Z",
  "hashtag": "",
  "max_upload_size_mb": 500,
  "estimated_sla": null,
  "project_assistant_enabled": true,
  "available_for_cert_project": false,
  "language": "en-us",
  "ndkeys": [
    "nd898",
    "nd898-ent",
    "nd898-ent-airbus",
    "nd898-beta"
  ],
  "coursekeys": [],
  "is_career": false,
  "sections": [
    {
      "id": 3658,
      "name": "Planning Graph Implementation",
      "created_at": "2018-04-16T21:21:42.192Z",
      "updated_at": "2018-04-16T21:23:22.370Z",
      "deleted_at": null,
      "position": 0,
      "rubric_id": 1800,
      "rubric_items": [
        {
          "id": 10732,
          "section_id": 3658,
          "passed_description": "(AUTOGRADED) Student code passes all Project Assistant test cases for:\n- `ActionLayer` mutual exclusion rules: \n  - `_inconsistent_effects()`\n  - `_interference()`\n  - `_competing_needs()`\n- `LiteralLayer` mutual exclusion rules: \n  - `_inconsistent_support()`\n  - `_negation()`",
          "exceeded_description": "",
          "created_at": "2018-04-16T21:23:50.138Z",
          "updated_at": "2018-05-14T20:28:00.627Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "Mutexes pass all test cases",
          "exceedable": false
        }
      ]
    },
    {
      "id": 3659,
      "name": "Heuristic Implementation",
      "created_at": "2018-04-16T21:23:22.579Z",
      "updated_at": "2018-04-16T21:23:30.687Z",
      "deleted_at": null,
      "position": 1,
      "rubric_id": 1800,
      "rubric_items": [
        {
          "id": 10733,
          "section_id": 3659,
          "passed_description": "(AUTOGRADED) Student code passes all Project Assistant test cases for:\nCorrectly implemented\n- `PlanningGraph` class heuristics:\n  - `h_levelsum()`\n  - `h_maxlevel()`\n  - `h_setlevel()`",
          "exceeded_description": "",
          "created_at": "2018-04-16T21:28:05.703Z",
          "updated_at": "2018-05-14T20:28:00.639Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "Planning graph heuristics pass all test cases",
          "exceedable": false
        }
      ]
    },
    {
      "id": 3660,
      "name": "Experimental Results & Report",
      "created_at": "2018-04-16T21:23:30.885Z",
      "updated_at": "2018-04-16T21:23:49.953Z",
      "deleted_at": null,
      "position": 2,
      "rubric_id": 1800,
      "rubric_items": [
        {
          "id": 10734,
          "section_id": 3660,
          "passed_description": "Report includes a table or chart to analyze the number of nodes expanded against number of actions in the domain.\n- The chart or table includes data for all search & heuristic combinations for air cargo problems 1 and 2\n- The chart or table includes data **at least** one uninformed search, two heuristics with greedy best first search, and two heuristics with A* on air cargo problems 3 and 4\n- Report includes at least a one paragraph discussion of these results that analyzes the growth trends as the problem size increases",
          "exceeded_description": "",
          "created_at": "2018-04-16T21:47:27.144Z",
          "updated_at": "2018-05-14T20:23:46.510Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "Analyze the search complexity as a function of domain size, search algorithm, and heuristic.",
          "exceedable": false
        },
        {
          "id": 10735,
          "section_id": 3660,
          "passed_description": "Report includes a table or chart to analyze the search time against the number of actions in the domain.\n- The chart or table includes data for all search & heuristic combinations for air cargo problems 1 and 2\n- The chart or table includes data **at least** one uninformed search, two heuristics with greedy best first search, and two heuristics with A* on air cargo problems 3 and 4\n- Report includes at least a one paragraph discussion of these results that analyzes the growth trends as the problem size increases",
          "exceeded_description": "",
          "created_at": "2018-04-16T21:54:20.516Z",
          "updated_at": "2018-05-14T20:23:46.516Z",
          "deleted_at": null,
          "optional": false,
          "position": 1,
          "criteria": "Analyze search time as a function of domain size, search algorithm, and heuristic.",
          "exceedable": false
        },
        {
          "id": 10736,
          "section_id": 3660,
          "passed_description": "Report includes a table or chart to analyze the length of the plans returned by each algorithm on all search problems.\n- The chart or table includes data for all search & heuristic combinations for air cargo problems 1 and 2\n- The chart or table includes data **at least** one uninformed search, two heuristics with greedy best first search, and two heuristics with A* on air cargo problems 3 and 4",
          "exceeded_description": "",
          "created_at": "2018-04-16T21:55:46.094Z",
          "updated_at": "2018-05-14T20:23:46.524Z",
          "deleted_at": null,
          "optional": false,
          "position": 2,
          "criteria": "Analyze the optimality of solution as a function of domain size, search algorithm, and heuristic.",
          "exceedable": false
        },
        {
          "id": 10737,
          "section_id": 3660,
          "passed_description": "Submission includes a short answer to each of the following questions. (A short answer should be at least 1-2 sentences at most a small paragraph.)\r\n\r\n- Which algorithm or algorithms would be most appropriate for planning in a very restricted domain (i.e., one that has only a few actions) and needs to operate in real time?\r\n- Which algorithm or algorithms would be most appropriate for planning in very large domains (e.g., planning delivery routes for all UPS drivers in the U.S. on a given day)\r\n- Which algorithm or algorithms would be most appropriate for planning problems where it is important to find only optimal plans?\r\n\r\n",
          "exceeded_description": "",
          "created_at": "2018-04-16T21:59:35.375Z",
          "updated_at": "2018-05-11T17:57:20.116Z",
          "deleted_at": null,
          "optional": false,
          "position": 3,
          "criteria": "Report answers all required questions",
          "exceedable": false
        }
      ]
    }
  ],
  "project": {
    "id": 421,
    "name": "Build a Forward Planning Agent",
    "nanodegree_key": "nd898",
    "is_cert_project": false,
    "audit_project_id": null,
    "hashtag": null,
    "audit_rubric_id": 2899,
    "entitlement_required": null,
    "is_career": null,
    "recruitment_family_id": 1,
    "created_at": "2018-03-13T20:12:17.156Z",
    "updated_at": "2021-04-08T15:40:03.565Z",
    "price": "9.0",
    "ungradeable_price": "3.0",
    "audit_price": "0.0"
  }
}