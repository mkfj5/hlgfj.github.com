WEBVTT
Kind: captions
Language: en

00:00:00.300 --> 00:00:03.300
Here is the version of
the algorithm we're going to use.

00:00:03.300 --> 00:00:04.400
Just like hill climbing,

00:00:04.400 --> 00:00:07.060
we're going to iterate with
simulated annealing, looking for

00:00:07.060 --> 00:00:11.370
points close to our current position
that might have an improved value.

00:00:11.370 --> 00:00:15.200
However, we're going to select our next
position randomly from the points in

00:00:15.200 --> 00:00:16.840
the region near us.

00:00:16.840 --> 00:00:20.020
If a new position is better
than our current position,

00:00:20.020 --> 00:00:21.360
we're going to take it.

00:00:21.360 --> 00:00:25.160
However, if it isn't better, we're still
going to take it with a probability of

00:00:25.160 --> 00:00:29.240
e to the delta E divided by T,
where T is our temperature.

00:00:29.240 --> 00:00:32.580
&gt;&gt; So we start with a high T,
do we change it later on?

00:00:32.580 --> 00:00:34.711
&gt;&gt; Yes,
in the algorithm we have a schedule for

00:00:34.711 --> 00:00:36.332
what the temperature should be.

00:00:36.332 --> 00:00:38.743
And we'll start with T being very high.

00:00:38.743 --> 00:00:43.870
And when T is high, say close to
infinity, delta E over T goes to 0.

00:00:43.870 --> 00:00:47.780
No matter what the delta E is,
even if it's negative.

00:00:47.780 --> 00:00:50.180
So e to 0 is 1.

00:00:50.180 --> 00:00:52.990
So in the beginning,
we have a lot of random motion as we

00:00:52.990 --> 00:00:55.230
take all the random
positions offered to us.

00:00:55.230 --> 00:00:57.980
No matter how bad the new position is.

00:00:57.980 --> 00:01:01.290
&gt;&gt; I see, just like in real annealing,
when the temperature is very high,

00:01:01.290 --> 00:01:03.690
the particle's jumping around
a lot in the beginning.

00:01:03.690 --> 00:01:07.040
So that if the particle gets stuck
in a local maximum instead, it has

00:01:07.040 --> 00:01:10.680
the ability to leave that peak, ignoring
that it is going the wrong way and

00:01:10.680 --> 00:01:12.920
instead end up at a different
part of the graph.

00:01:12.920 --> 00:01:14.449
Because the temperature is high,

00:01:14.449 --> 00:01:17.569
the next point that's fixed randomly
can make it move down the slope.

00:01:17.569 --> 00:01:21.186
Given enough time the randomness will
ensure we get off this particular hill

00:01:21.186 --> 00:01:23.575
and hit the hill with
the global maximum instead.

00:01:23.575 --> 00:01:24.919
&gt;&gt; Precisely.

00:01:24.919 --> 00:01:26.305
&gt;&gt; But how does it converge?

00:01:26.305 --> 00:01:29.047
Won't we continue doing
this random walk forever?

00:01:29.047 --> 00:01:33.400
&gt;&gt; Well, let's first take a look at
the opposite situation were T is near 0.

00:01:33.400 --> 00:01:38.700
We never want T to actually be 0 because
that will give us an undefined answer.

00:01:38.700 --> 00:01:43.400
So for illustration purposes
let's say T is equal to 0.01.

00:01:43.400 --> 00:01:47.794
We already said that if the purposed
new random position improves our score,

00:01:47.794 --> 00:01:49.222
we're going to take it.

00:01:49.222 --> 00:01:51.860
If it stays the same delta E is 0.

00:01:51.860 --> 00:01:54.633
Or if it gets worse,
delta E is negative.

00:01:54.633 --> 00:01:57.449
Let's say delta E here is -1.

00:01:57.449 --> 00:02:03.220
Now we have e to the -1 over 0.01.

00:02:03.220 --> 00:02:05.663
Which is the same as e to the -100.

00:02:05.663 --> 00:02:07.583
Which a very small number.

00:02:07.583 --> 00:02:11.475
So we have almost no chance of taking
that suggested new random position.

00:02:11.475 --> 00:02:14.335
Instead, we'll keep generating
new random positions

00:02:14.335 --> 00:02:16.495
until we get one that improves e.

00:02:16.495 --> 00:02:19.660
&gt;&gt; Then, when T is small,
we basically have normal hill climbing

00:02:19.660 --> 00:02:20.631
&gt;&gt; Correct.

00:02:20.631 --> 00:02:24.041
&gt;&gt; So we'll just slowly change T from
very large, where we're going to move

00:02:24.041 --> 00:02:27.628
over the graph randomly, to very small,
where we climb to the nearest peak.

00:02:27.628 --> 00:02:28.952
&gt;&gt; Yep.

00:02:28.952 --> 00:02:33.166
And if we happen to get stuck at
a plateau along the way, like here,

00:02:33.166 --> 00:02:34.081
delta E is 0.

00:02:34.081 --> 00:02:36.247
But that makes the equation
e to the 0 again.

00:02:36.247 --> 00:02:38.977
So that the algorithm will take
the new random position instead.

00:02:38.977 --> 00:02:41.228
&gt;&gt; That will happen no matter what T is.

00:02:41.228 --> 00:02:44.770
&gt;&gt; And eventually, we'll random walk off
the plateau, back to someplace where

00:02:44.770 --> 00:02:47.841
there's a positive gradient and
continue going up to the maximum.

00:02:47.841 --> 00:02:51.057
&gt;&gt; Exactly, the great thing about
simulated annealing is that it's

00:02:51.057 --> 00:02:54.217
guaranteed to converge to the global
maximum if we start T high and

00:02:54.217 --> 00:02:55.610
decrease it slowly enough.

