WEBVTT
Kind: captions
Language: zh-CN

00:00:00.562 --> 00:00:03.299
这是我们要用的算法

00:00:03.299 --> 00:00:06.639
就像爬山算法 我们要用模拟退火来进行迭代

00:00:06.639 --> 00:00:08.839
找出现位置附近

00:00:08.839 --> 00:00:11.369
值可能更大的点

00:00:11.369 --> 00:00:14.629
不过 我们要在周围的区域里

00:00:14.630 --> 00:00:16.560
随机选点作为下一个位置

00:00:16.559 --> 00:00:20.019
如果新位置比现位置好

00:00:20.019 --> 00:00:21.359
那我们就取新位置

00:00:21.359 --> 00:00:24.100
如果不比现位置好 我们也取该位置

00:00:24.100 --> 00:00:27.550
但取点概率为 e^△E/T

00:00:27.550 --> 00:00:29.240
其中 T 为温度

00:00:29.239 --> 00:00:30.729
所以我们先从高 T 值开始？

00:00:30.730 --> 00:00:32.579
稍后要改变该值吗？

00:00:32.579 --> 00:00:35.000
恩 在这个算法里 我们会根据时间表

00:00:35.000 --> 00:00:36.479
来改变温度

00:00:36.479 --> 00:00:38.949
一开始的 T 会很高

00:00:38.950 --> 00:00:41.520
当 T 很高时 比如说接近无穷大

00:00:41.520 --> 00:00:45.940
无论 △E 等于多少 就算是负值

00:00:45.939 --> 00:00:47.780
 △E/T 都会无限接近 0

00:00:47.780 --> 00:00:49.340
所以 e^0 等于 1

00:00:49.340 --> 00:00:52.710
所以一开始我们会有很多随机运动

00:00:52.710 --> 00:00:55.230
这是因为我们会取所有随机建议位置

00:00:55.229 --> 00:00:57.979
无论新位置多差都是如此

00:00:57.979 --> 00:00:58.609
知道了

00:00:58.609 --> 00:01:01.289
就像真实退火 当温度特别高的时候

00:01:01.289 --> 00:01:03.689
粒子一开始会到处跳跃

00:01:03.689 --> 00:01:06.829
所以就算粒子卡在局部最大值里

00:01:06.829 --> 00:01:10.239
它仍有能力离开那个峰值 就算离开的方向是错的

00:01:10.239 --> 00:01:12.920
它也总能到达图里的其它区域

00:01:12.920 --> 00:01:15.820
因为温度很高 所以它随机停下的下一个点

00:01:15.819 --> 00:01:17.599
能让它走下山坡

00:01:17.599 --> 00:01:21.459
只要时间充足 随机性就能确保它离开这个山峰

00:01:21.459 --> 00:01:23.750
并抵达全局最大值所在的那个山峰

00:01:23.750 --> 00:01:25.010
就是这样

00:01:25.010 --> 00:01:26.410
但什么时候收敛呢？

00:01:26.409 --> 00:01:29.090
我们会不会一直随机运动下去？

00:01:29.090 --> 00:01:32.829
我们先来看看完全相反的情况 也就是 T 接近 0

00:01:33.890 --> 00:01:36.090
我们永远不希望 T 真的等于 0

00:01:36.090 --> 00:01:38.700
因为这样就得不到解了

00:01:38.700 --> 00:01:43.293
只是为了叙述方便 假设 T 等于 0.01

00:01:43.293 --> 00:01:47.441
我们已经说了 如果新的随机建议位置能增加分值

00:01:47.441 --> 00:01:51.969
我们就取该位置 如果分值不变 那 △E 就为 0

00:01:51.969 --> 00:01:54.769
如果分值变小了 那 △E 就为负值

00:01:54.769 --> 00:01:58.932
假设这里的 △E 为 -1

00:01:58.932 --> 00:02:05.655
现在 e ^-1/0.01 等于 e ^-100

00:02:05.655 --> 00:02:07.555
这是个非常小的值

00:02:07.555 --> 00:02:11.474
所以我们几乎不可能取这个新的随机建议位置

00:02:11.474 --> 00:02:14.335
相反 我们会继续生成新的随机位置

00:02:14.335 --> 00:02:16.495
直到得到能增加 e 值的位置为止

00:02:16.495 --> 00:02:19.840
当 T 很小时 我们基本上就是在进行普通的爬山算法

00:02:19.840 --> 00:02:20.789
对的

00:02:20.789 --> 00:02:23.250
所以我们会把 T 从非常大

00:02:23.250 --> 00:02:25.389
这时我们会在图上随机移动

00:02:25.389 --> 00:02:27.859
慢慢改成非常小 这时我们会爬上最近的山峰

00:02:27.860 --> 00:02:29.110
对的

00:02:29.110 --> 00:02:31.920
如果过程中我们恰好陷在高原上

00:02:31.919 --> 00:02:34.169
比如这里 △E 为 0

00:02:34.169 --> 00:02:36.339
这样等式又成了 e^0 了

00:02:36.340 --> 00:02:38.620
那算法就会另选新位置

00:02:38.620 --> 00:02:41.450
而且无论 T 等于什么 这都是一定的

00:02:41.449 --> 00:02:43.449
最后我们会随机走下高原

00:02:43.449 --> 00:02:45.859
回到某个梯度为正的位置

00:02:45.860 --> 00:02:47.980
继续向最大值攀爬

00:02:47.979 --> 00:02:50.530
对的 模拟退火的精髓就在于

00:02:50.530 --> 00:02:53.300
能保证朝全局最大值收敛

00:02:53.300 --> 00:02:55.610
只要我们一开始把 T 设得很高 然后以足够慢的速度减小即可

