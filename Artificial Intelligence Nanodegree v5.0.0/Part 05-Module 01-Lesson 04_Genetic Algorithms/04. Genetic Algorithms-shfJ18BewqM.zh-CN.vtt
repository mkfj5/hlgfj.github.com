WEBVTT
Kind: captions
Language: zh-CN

00:00:00.360 --> 00:00:03.790
在讲遗传算法之前 我们还要知道一点

00:00:03.790 --> 00:00:07.080
共有 28 对可能相互攻击的女皇

00:00:07.080 --> 00:00:08.699
待在这个 8 乘 8 的棋盘上

00:00:08.699 --> 00:00:10.489
你怎么知道的？

00:00:10.490 --> 00:00:11.679
我们有 8 个女皇

00:00:11.679 --> 00:00:14.320
而我们想研究每对可能攻击彼此的女皇

00:00:14.320 --> 00:00:16.285
所以是八选二种可能性

00:00:16.285 --> 00:00:21.030
那就是 8! / (8 - 2)! * 2!

00:00:21.030 --> 00:00:24.170
很好 由于 n 皇后的目标是

00:00:24.170 --> 00:00:26.320
把皇后攻击对减少到 0

00:00:26.320 --> 00:00:28.469
所以我们要为棋局找一个适应度函数

00:00:28.469 --> 00:00:33.109
函数应为皇后攻击对的最大值 也就是 28

00:00:33.109 --> 00:00:36.549
减去给定棋局的攻击皇后数

00:00:36.549 --> 00:00:40.638
在八皇后中 适应度函数等于 28

00:00:40.639 --> 00:00:42.109
我们就赢了

00:00:42.109 --> 00:00:46.420
遗传算法类比了生物学里的自然选择

00:00:46.420 --> 00:00:50.451
使用繁衍和变异的思路来为问题求最佳解

00:00:50.451 --> 00:00:54.049
我觉得最好在讲遗传算法时举些例子

00:00:54.049 --> 00:00:56.750
好 那欢迎八皇后问题登场

00:00:56.750 --> 00:00:59.576
首先 我们随机选四个棋局

00:00:59.576 --> 00:01:01.643
这四个棋局代表我们的基因库

00:01:01.643 --> 00:01:05.829
我们要试着让它们以不同的方式结合 从而繁衍出更好的棋局

00:01:05.829 --> 00:01:08.000
我们要怎么选呢？

00:01:08.000 --> 00:01:10.060
容易 适者生存

00:01:10.060 --> 00:01:13.365
根据刚才讲的适应度函数来评估各棋局

00:01:13.364 --> 00:01:16.015
最上面的棋局只有 4 个攻击对

00:01:16.015 --> 00:01:18.953
也就意味着其适应度函数的值为 28 - 4 也就是 24

00:01:18.953 --> 00:01:22.670
下一个有 5 个攻击对 所以值为 23

00:01:22.670 --> 00:01:25.992
剩下的两个值分别为 20 和 11

00:01:25.992 --> 00:01:27.072
可怜的第四个

00:01:27.072 --> 00:01:29.161
可能永远都没机会生小孩了

00:01:29.162 --> 00:01:30.475
进化真残酷

00:01:30.475 --> 00:01:33.096
[音乐]

00:01:33.096 --> 00:01:36.960
不管怎么说 我们根据适应度的值 按比例生成概率

00:01:36.960 --> 00:01:39.314
从而确定各棋局繁衍的概率有多大

00:01:39.314 --> 00:01:41.778
所以基本上我们就是把四个值相加

00:01:41.778 --> 00:01:43.600
然后将各值转化为分数

00:01:43.600 --> 00:01:44.459
对的

00:01:44.459 --> 00:01:50.759
好 所以 24 + 23 + 20 + 11 等于 78

00:01:50.760 --> 00:01:53.820
24/78 = 31%

00:01:53.819 --> 00:01:58.652
所以适应度最高的棋局有 31% 的概率被选为父代

00:01:58.653 --> 00:01:59.910
对的

00:01:59.909 --> 00:02:04.673
继续计算各棋局的百分比

00:02:04.673 --> 00:02:07.403
得到 29%、26% 和 14%

00:02:07.403 --> 00:02:08.818
可怜的第四个

00:02:08.818 --> 00:02:10.317
你能别玩了吗？

00:02:10.317 --> 00:02:13.629
— [声音]                                            
— 好了

00:02:13.629 --> 00:02:17.569
现在我们选出四个父代来生成四个子代

00:02:17.569 --> 00:02:21.090
选择过程大概就是投掷一颗有 100 面的骰子 选出第一个父代

00:02:21.090 --> 00:02:23.611
如果掷出的点数在 1 - 31 之间 那就选第一个棋局

00:02:23.611 --> 00:02:26.067
如果在 32 - 60 之间 那就选第二局 以此类推

00:02:26.068 --> 00:02:30.150
假设我们掷出了 55 因此第一个父代选第二局

00:02:30.150 --> 00:02:33.831
再次投掷那个 100 面的骰子 得到第二个父代

00:02:33.830 --> 00:02:35.093
是第一个棋局

00:02:35.093 --> 00:02:36.949
继续这个步骤

00:02:36.949 --> 00:02:39.414
第三个父代是第二个棋局

00:02:39.414 --> 00:02:40.514
真幸运

00:02:40.514 --> 00:02:42.784
最后一个父代是第三个棋局

00:02:42.784 --> 00:02:43.884
— 可怜的…                                            
— 别说了！

00:02:45.085 --> 00:02:49.635
好了 这些幸运的棋局会开始繁衍后代

00:02:49.634 --> 00:02:52.350
每对要繁衍多少子代呢？

00:02:52.350 --> 00:02:52.990
两个

00:02:52.991 --> 00:02:54.610
为什么呢？

00:02:54.610 --> 00:02:58.334
用遗传算法时 我们有很多参数可以修改

00:02:58.334 --> 00:03:01.229
我们可以尽量最优化 以便尽快收敛 获得令人满意的解

00:03:01.229 --> 00:03:03.780
为了方便 就假设这里会繁衍两个子代吧

00:03:03.780 --> 00:03:06.590
好的 现在我们知道父代是什么

00:03:06.590 --> 00:03:11.240
也知道要繁衍多少子代了 那要怎么繁衍呢？

00:03:11.240 --> 00:03:13.320
繁衍过程叫交叉

00:03:13.319 --> 00:03:16.465
你可以看到每对父代都选了些位置

00:03:16.465 --> 00:03:17.925
随机选的

00:03:17.925 --> 00:03:21.219
把第一个父代的第一部分

00:03:21.219 --> 00:03:24.009
与第二个父代的第二部分重组 就生成了第一个子代

00:03:24.009 --> 00:03:28.019
这听着更像是弗兰肯斯坦用身体的不同部分拼凑怪物

00:03:28.020 --> 00:03:29.344
而不像繁衍 不过你接着说吧

00:03:31.225 --> 00:03:34.448
要生成第二个子代 我们取第二个父代的第一部分

00:03:34.448 --> 00:03:37.080
与第一个父代的第二部分重组

00:03:37.080 --> 00:03:39.518
对第二对父代进行同样的操作

00:03:39.518 --> 00:03:41.484
它活过来了！

00:03:41.484 --> 00:03:45.614
— [笑声]
— 所以

00:03:45.614 --> 00:03:49.358
希望至少有一个子代能得到父代的最优特性

00:03:49.358 --> 00:03:52.230
这让我想起了电影 《龙兄鼠弟》里的阿诺·斯瓦辛格

00:03:52.230 --> 00:03:52.879
和丹尼·德维托

00:03:52.879 --> 00:03:56.740
你暴露年龄了 那部电影放映的时候我还没出生

00:03:56.740 --> 00:03:58.615
但那仍不失为一部好电影

00:03:58.615 --> 00:04:02.965
不过我知道你想说什么了 如果像电影假想的一样

00:04:02.965 --> 00:04:05.735
有个子代继承了父代的全部优点

00:04:05.735 --> 00:04:08.025
另一个子代却继承了全部缺点怎么办？

00:04:08.025 --> 00:04:11.417
那么在下一代里 皇后攻击对更少的子代

00:04:11.417 --> 00:04:14.812
适应度函数值会更高 因而更有机会繁衍子代

00:04:14.812 --> 00:04:18.016
皇后攻击对较多的子代则适应度函数值较低

00:04:18.016 --> 00:04:19.430
繁衍子代的概率也就比较低

00:04:19.430 --> 00:04:23.168
我们希望在繁衍出足够多的代数后 可以进化出

00:04:23.168 --> 00:04:25.836
一个解了问题的八皇后棋局

00:04:25.836 --> 00:04:27.534
还有至关重要的一步

00:04:27.535 --> 00:04:29.720
但我们先来好好回顾下交叉的过程

