WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:02.049
So here's our Sudoku puzzle.

00:00:02.049 --> 00:00:05.269
After running constraint propagation
by iterating the functions eliminate

00:00:05.269 --> 00:00:07.809
and only choice we get to this point.

00:00:07.809 --> 00:00:11.939
Where in each box we've recorded
the values that are allowed in that box.

00:00:11.939 --> 00:00:16.119
And let's pick one at random,
say this one with values eight and nine.

00:00:16.120 --> 00:00:17.859
Since we don't know what
value will go here yet,

00:00:17.859 --> 00:00:19.989
we'll just consider both possibilities.

00:00:19.989 --> 00:00:23.070
We'll try to solve a Sudoku
obtained if this value's an eight.

00:00:24.089 --> 00:00:27.809
And also the Sudoku obtained,
if this value's a nine.

00:00:27.809 --> 00:00:31.160
Thus, we start to create
a tree of possibilities.

00:00:31.160 --> 00:00:33.119
Obviously, we could have
picked any other box and

00:00:33.119 --> 00:00:35.820
split it into its available values,
but the reason we

00:00:35.820 --> 00:00:39.359
picked a box with only two values
is because this will be less work.

00:00:39.359 --> 00:00:40.320
So let's recap.

00:00:40.320 --> 00:00:44.570
Here we have our original Sudoku and
the two possibilities for

00:00:44.570 --> 00:00:46.740
this box, eight and nine.

00:00:46.740 --> 00:00:50.630
For each of the two possibilities,
we again, run constraint propagation.

00:00:50.630 --> 00:00:52.289
Let's say we're on one of the left.

00:00:52.289 --> 00:00:56.320
After running constraint propagation,
we see that we're still not done.

00:00:56.320 --> 00:00:59.359
We look at one of the boxes with
the fewest number of possibilities and

00:00:59.359 --> 00:01:03.939
let's say it's a box here with three
possibilities, one, five, and nine.

00:01:03.939 --> 00:01:06.021
Well now we branch out our tree again,
and

00:01:06.021 --> 00:01:08.649
try to solve the three
Sudoku's obtained this way.

00:01:08.649 --> 00:01:12.269
[BLANK_AUDIO]

00:01:12.269 --> 00:01:14.265
Let's say we try to solve
the one on the left, and

00:01:14.266 --> 00:01:16.450
that one doesn't give us a solution.

00:01:16.450 --> 00:01:18.840
No problem, we'll try the next one.

00:01:18.840 --> 00:01:20.990
Let's say this splits into two Sudoku's

00:01:20.989 --> 00:01:24.304
[BLANK_AUDIO]

00:01:24.304 --> 00:01:27.121
And again, let say the one to
the left doesn't reach its solution,

00:01:27.120 --> 00:01:28.799
but the one on the right does.

00:01:28.799 --> 00:01:30.879
Hooray, we're reach a solution.

00:01:30.879 --> 00:01:33.959
This will be the general procedure
if we don't solve the Sudoku and

00:01:33.959 --> 00:01:37.199
we get a few possibilities for
some boxes will branch out and

00:01:37.200 --> 00:01:39.109
try to solve the Sudoku's
obtain its way.

00:01:40.230 --> 00:01:44.060
If we reach a Sudoku that can't be
solved then we move to the next one and

00:01:44.060 --> 00:01:46.530
we do this until we reach a solution.

00:01:46.530 --> 00:01:49.210
This procedure is called
Depth First Search.

00:01:50.959 --> 00:01:53.599
The Depth First Search
algorithm works as follows.

00:01:53.599 --> 00:01:57.669
We start by the root, and traverse
the tree always in the leftmost fashion.

00:01:57.670 --> 00:02:02.180
When we reach an end, we go to the next
branch to the right, and keep going.

00:02:02.180 --> 00:02:05.450
We'll have the chance to learn this
more in detail later in the nanodegree.最新课程跟课件还有一对一辅导请加wx：udacity6

