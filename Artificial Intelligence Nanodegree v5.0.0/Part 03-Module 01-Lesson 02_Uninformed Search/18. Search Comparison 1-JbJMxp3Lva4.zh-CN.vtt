WEBVTT
Kind: captions
Language: zh-CN

00:00:00.270 --> 00:00:01.756
答案如下

00:00:01.756 --> 00:00:07.437
宽度优先搜索正如其名

00:00:07.437 --> 00:00:14.970
会按这个顺序来扩展节点 1、2、3、4、5、6、7

00:00:14.970 --> 00:00:19.216
所以它会一层一层地扩展 也就是宽度优先

00:00:19.216 --> 00:00:20.998
是否最优呢？

00:00:20.998 --> 00:00:25.359
该搜索总能优先扩展最短的路径

00:00:25.359 --> 00:00:28.379
无论目标藏在哪里

00:00:28.379 --> 00:00:32.817
它都能以最短路径找出来

00:00:32.817 --> 00:00:33.934
所以是最优的

00:00:33.935 --> 00:00:35.347
最小代价搜索

00:00:35.347 --> 00:00:40.027
首先我们把长度为 0 的路径扩展开来

00:00:40.027 --> 00:00:45.000
然后是长度为 2 的

00:00:45.000 --> 00:00:49.823
然后是长度为 4 的 长度为 5 的

00:00:49.823 --> 00:00:54.647
长度为 6 的 长度为 7 的

00:00:54.648 --> 00:00:58.940
最后是长度为 8 的

00:00:58.939 --> 00:01:04.078
正如我们所见 该算法能保证找出代价最小的路径

00:01:04.078 --> 00:01:09.019
如果我们假设每一步的代价值都非负数的话

00:01:09.019 --> 00:01:11.891
深度优先搜索则会先尽可能地往深层搜索

00:01:11.891 --> 00:01:18.313
所以会先走 1、2、3 然后回到上面

00:01:18.313 --> 00:01:23.980
到 4 再回到上面 到 5、6、7

00:01:23.980 --> 00:01:28.044
你可以发现

00:01:28.043 --> 00:01:28.402
它找出的不一定是最短路径

00:01:28.402 --> 00:01:32.897
假设目标在位置 5 和 3

00:01:32.897 --> 00:01:37.715
那么算法会找到在位置 3 的目标 路径比较长

00:01:37.715 --> 00:01:41.990
而不是找到在位置 5 的目标 所以不是最优的

00:01:41.990 --> 00:01:49.019
[空白音频]

