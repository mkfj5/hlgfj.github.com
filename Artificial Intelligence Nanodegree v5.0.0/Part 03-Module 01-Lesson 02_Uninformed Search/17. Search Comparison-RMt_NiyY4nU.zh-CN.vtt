WEBVTT
Kind: captions
Language: zh-CN

00:00:00.067 --> 00:00:05.147
我们已经学习了两种搜索算法 一个是宽度优先搜索

00:00:05.147 --> 00:00:10.573
使用该算法 我们总会先拓展最浅层的路径 也就是最短路径

00:00:10.573 --> 00:00:13.400
一个是最小代价搜索

00:00:13.400 --> 00:00:18.606
使用该算法 我们总会先拓展总代价最小的路径

00:00:18.606 --> 00:00:22.414
现在我要向大家介绍第三种算法

00:00:22.414 --> 00:00:26.816
深度优先搜索 这在某种程度上与宽度优先搜索相反

00:00:26.815 --> 00:00:31.897
使用深度优先搜索时 你总会先拓展最长的路径

00:00:31.897 --> 00:00:34.442
也就是连接最多的路径

00:00:34.442 --> 00:00:38.652
现在我想让你观察这些树的每个节点

00:00:38.652 --> 00:00:43.247
说出它们的扩展顺序 第一个要拓展什么 第二个、

00:00:43.247 --> 00:00:47.789
第三个、第四个、第五个等等 将相应数字写在圆圈中

00:00:47.789 --> 00:00:52.113
如果有等效的节点 那请按从左到右的顺序

00:00:52.113 --> 00:00:56.207
来填写

00:00:56.207 --> 00:01:01.045
另外 我还有一个问题

00:01:01.045 --> 00:01:03.839
这些搜索是最优的吗？

00:01:03.840 --> 00:01:08.725
也就是说 它们能保证找到最优解吗？

00:01:08.724 --> 00:01:13.393
对于宽度优先搜索 最优解意味着找到最短路径

00:01:13.393 --> 00:01:17.453
如果你觉得它能保证找出最短路径 那就在这打钩

00:01:17.453 --> 00:01:22.266
对于最小代价搜索 最优解意味着找出

00:01:22.266 --> 00:01:27.164
总代价最小的路径 若你觉得该搜索能做到这一点 那就在这打钩

00:01:27.164 --> 00:01:31.899
假设代价值都是正数

00:01:31.899 --> 00:01:37.789
而对于深度优先搜索 代价最小或最优则跟宽度优先搜索一样

00:01:37.789 --> 00:01:42.245
意味着能找到长度最短的路径

00:01:42.245 --> 00:01:46.318
如果你觉得深度优先搜索总能做到这一点 就请在这里打钩

00:01:46.319 --> 00:01:51.019
[无音效]

