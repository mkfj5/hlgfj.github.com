WEBVTT
Kind: captions
Language: en

00:00:00.004 --> 00:00:03.025
Given the non-optimality
of depth-first search,

00:00:03.025 --> 00:00:05.045
why would anybody choose to use it?

00:00:05.046 --> 00:00:07.694
Well, the answer has to do
with the storage requirements.

00:00:07.694 --> 00:00:12.711
Here I've illustrated a state
space consisting of a very large,

00:00:12.711 --> 00:00:15.275
or even infinite, binary tree.

00:00:15.275 --> 00:00:19.124
As we go to level one, two,
three down to level n,

00:00:19.123 --> 00:00:21.711
the tree gets larger and larger.

00:00:21.711 --> 00:00:26.442
Now, let's consider the frontier for
each of these search algorithms.

00:00:26.443 --> 00:00:31.054
For breadth-first search we know
the frontier looks like that.

00:00:31.053 --> 00:00:35.676
And so when we get down to level n,
we'll require storage

00:00:35.676 --> 00:00:40.120
space of two to the n paths
in a breadth-first search.

00:00:40.119 --> 00:00:44.149
For cheapest-first, the frontier
is going to be more complicated.

00:00:44.149 --> 00:00:48.460
It's going to sort of work
out this contour of cost, but

00:00:48.460 --> 00:00:51.258
it's going to have a similar
total number of nodes.

00:00:51.258 --> 00:00:54.835
But for depth-first search,
as we go down the tree,

00:00:54.835 --> 00:00:58.423
we start going down this branch,
and then we back up.

00:00:58.423 --> 00:01:02.838
But at any point, our frontier
is only going to have n notes,

00:01:02.838 --> 00:01:05.459
rather than two to the n notes.

00:01:05.459 --> 00:01:08.841
So that's a substantial savings for
depth-first search.

00:01:08.840 --> 00:01:12.621
Now of course, if we're also
keeping track of the explored set,

00:01:12.621 --> 00:01:15.370
then we don't get that much savings.

00:01:15.370 --> 00:01:17.439
But without the explored set,

00:01:17.439 --> 00:01:21.902
depth-first search has a huge
advantage in terms of space saved.

00:01:21.903 --> 00:01:25.537
One more property of the algorithms
to consider is the property of

00:01:25.537 --> 00:01:26.770
completeness.

00:01:26.769 --> 00:01:31.144
Meaning, if there is a goal somewhere,
will the algorithm find it?

00:01:31.144 --> 00:01:34.985
So let's move from very large
trees to infinite trees and

00:01:34.986 --> 00:01:40.120
let's say that there's some goal hidden
somewhere deep down in that tree.

00:01:40.120 --> 00:01:44.160
And the question is,
are each of these algorithms complete?

00:01:44.159 --> 00:01:48.429
That is, are they guaranteed
to find a path to the goal?

00:01:48.430 --> 00:01:50.653
Mark off the check boxes for

00:01:50.653 --> 00:01:55.590
the algorithms that you believe
are complete in this sense.

