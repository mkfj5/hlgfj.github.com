WEBVTT
Kind: captions
Language: zh-CN

00:00:01.409 --> 00:00:06.820
答案是 在锡比乌(Sibiu)(Sibiu)里 动作函数给出了四个行动

00:00:06.820 --> 00:00:09.740
对应四条路径

00:00:09.740 --> 00:00:14.696
所以我们要把每个行动对应的路径加进边缘

00:00:14.696 --> 00:00:17.064
一条到这里

00:00:17.065 --> 00:00:21.855
一条从阿拉德(Arad)继续延伸到这里

00:00:21.855 --> 00:00:25.737
第三条继续延伸到这里

00:00:25.736 --> 00:00:32.080
第四条从阿拉德(Arad)到锡比乌(Sibiu)(Sibiu)

00:00:32.081 --> 00:00:36.589
然后又返回阿拉德(Arad)

00:00:36.588 --> 00:00:41.339
看起来好像有点傻 也有点冗余 居然有一条路径从阿拉德(Arad)开始

00:00:41.340 --> 00:00:44.540
走到锡比乌(Sibiu)(Sibiu) 又回到阿拉德(Arad)

00:00:44.539 --> 00:00:49.049
这哪能帮我们到达目的地布加勒斯特呢？

00:00:49.049 --> 00:00:52.469
但我们可以看到 如果我们用的是树搜索

00:00:52.469 --> 00:00:56.320
就会自然而然地出现这种现象 这是为什么呢？

00:00:56.320 --> 00:01:00.250
为什么树搜索根本没有注意到这条路径折返了

00:01:00.250 --> 00:01:03.549
树搜索会做的 其实是在

00:01:03.549 --> 00:01:07.709
状态空间上叠加一层搜索树

00:01:07.709 --> 00:01:09.739
叠加的树像这样

00:01:09.739 --> 00:01:15.280
从 A 状态开始 A 状态里有三个行动

00:01:15.280 --> 00:01:22.060
由此我们得到前往 Z、S 和 T 的路径

00:01:22.060 --> 00:01:25.310
从 S 开始 而 S 有四个行动

00:01:25.310 --> 00:01:30.424
所以我们得到前往 O、F、R

00:01:30.424 --> 00:01:37.406
和 A 的路径 然后树从这里继续往下

00:01:37.406 --> 00:01:43.018
在接下来的元素里 我们选一个出来 从边缘中取出 然后继续下去

00:01:43.018 --> 00:01:49.653
但要注意 虽然我们在状态空间里会返回到 A 状态

00:01:49.653 --> 00:01:55.007
但在树里 这不过是树的另一个元素而已

00:01:55.007 --> 00:01:58.026
这是搜索空间其它的内容

00:01:58.025 --> 00:02:02.000
随着我们开始探索状态

00:02:02.000 --> 00:02:04.117
我们会不断记录边缘

00:02:04.117 --> 00:02:08.329
也就是不断记录一系列位于路径末端

00:02:08.329 --> 00:02:10.239
且尚未探索的状态

00:02:10.239 --> 00:02:14.938
而在边缘之后是已探索状态集

00:02:14.937 --> 00:02:18.729
在其前则是未探索状态集

00:02:18.729 --> 00:02:23.601
我们之所以要记录已探索状态

00:02:23.602 --> 00:02:27.573
是因为当我们想扩展而且发现重复时

00:02:27.573 --> 00:02:32.342
比如说我们从这里开始扩展

00:02:32.342 --> 00:02:37.612
如果指回 T 状态 而我们没有记录的话

00:02:37.611 --> 00:02:43.189
我们就得在这下面为 T 添加新状态了

00:02:43.189 --> 00:02:45.253
可因为我们已经见过了 T 状态

00:02:45.253 --> 00:02:50.149
我们知道这一步实际上折回了已探索状态

00:02:50.150 --> 00:02:53.319
由于我们记录了这一点 所以就不再需要添加新状态了

00:02:53.319 --> 00:02:54.748
[空白音频]

