WEBVTT
Kind: captions
Language: zh-CN

00:00:00.410 --> 00:00:03.100
为什么一般树搜索

00:00:03.100 --> 00:00:07.859
或图搜索算法不停止呢？ 不是已经将目标节点添加到边缘里了吗？

00:00:07.860 --> 00:00:11.323
原因就在于这可能不是前往目标的最佳路径

00:00:11.323 --> 00:00:13.609
现在我们找到了一条长度为 2 的路径

00:00:13.609 --> 00:00:18.722
并将长度为 3、通往目标的路径添加了进来

00:00:18.722 --> 00:00:23.532
一般图搜索或树搜索并不知道是否还有其它路径

00:00:23.532 --> 00:00:27.897
可供拓展 不知道是否有长度为 2.5 之类

00:00:27.897 --> 00:00:28.425
的路径

00:00:28.425 --> 00:00:30.692
但我们可以进行最优化

00:00:30.692 --> 00:00:34.790
如果我们知道自己正在进行宽度优先搜索

00:00:34.790 --> 00:00:39.453
也知道不可能有长度为 2.5 的路径 那我们就可以修改算法

00:00:39.454 --> 00:00:43.430
令其在状态加入边缘后立即进行检查

00:00:43.430 --> 00:00:45.856
而不是等到状态被扩展后才开始检查

00:00:45.856 --> 00:00:49.439
因此 我们可以编写一个特殊的宽度优先搜索

00:00:49.439 --> 00:00:51.187
例行程序 使其早点终止

00:00:51.188 --> 00:00:56.484
而且一旦边缘添加了一个目标状态 算法就会返回出结果

00:00:56.484 --> 00:01:02.329
宽度优先搜索会找到这条终点为布加勒斯特的路径

00:01:02.329 --> 00:01:06.230
如果我们从步数的角度来寻找最短路径的话

00:01:06.230 --> 00:01:08.971
宽度优先搜索就一定能找到它

00:01:08.971 --> 00:01:13.737
但如果我们要找的最短路径

00:01:13.736 --> 00:01:18.500
是从总代价的角度出发的 也就是把每步的代价都加起来

00:01:18.500 --> 00:01:23.590
那么这条路径就比宽度优先搜索找出的那条要短

00:01:23.590 --> 00:01:25.340
我们来看看要如何找出这条路径

