WEBVTT
Kind: captions
Language: zh-CN

00:00:00.190 --> 00:00:03.940
下一个问题是 alpha-beta 剪枝算法能否应用于多人游戏

00:00:03.940 --> 00:00:07.199
根据 Korff 写的论文 剪枝算法是能用的

00:00:07.200 --> 00:00:10.490
只要玩家评估函数返回值总和有上限

00:00:10.490 --> 00:00:12.570
且各玩家的分值有下限即可

00:00:12.570 --> 00:00:16.890
对于我们为孤立棋创建的评估函数 #my_moves

00:00:16.890 --> 00:00:21.929
0 是个自然而然的下限 但总和要设什么上限好呢？

00:00:21.929 --> 00:00:24.780
如果评估函数能估计

00:00:24.780 --> 00:00:28.060
各玩家剩余的总步数 那就可以了 因为剩余步数总和

00:00:28.059 --> 00:00:31.554
肯定不超过孤立棋盘的空格数的

00:00:31.554 --> 00:00:35.844
比如 在这个棋盘里 上限应该是 22 也就是每个玩家的上限约为 7

00:00:35.844 --> 00:00:37.324
理论是说得通

00:00:37.325 --> 00:00:40.725
但博弈树每层的上限都会变化

00:00:40.725 --> 00:00:43.632
为讲解方便 我们能不能把事情简化一下呢？

00:00:43.631 --> 00:00:47.292
好的 假设玩家总分值不能超过 10

00:00:47.292 --> 00:00:50.822
再简化一下好了 假设总分值就是 10

00:00:50.822 --> 00:00:52.452
这就能进行剪枝了？

00:00:52.451 --> 00:00:52.991
对的

00:00:52.991 --> 00:00:55.621
我们来看一个例子 这个例子既涉及直接剪枝

00:00:55.621 --> 00:00:56.900
又涉及浅层剪枝

00:00:56.901 --> 00:00:59.771
这是不是意味着我们不能像之前一样进行深层剪枝了？

00:00:59.771 --> 00:01:01.591
很遗憾 是的

00:01:01.591 --> 00:01:02.861
虽然可以进行一些剪枝操作

00:01:02.860 --> 00:01:06.161
但如 alpha-beta 算法允许的深度剪枝是不行了

00:01:06.161 --> 00:01:09.239
好吧 让我看看直接剪枝的例子

00:01:09.239 --> 00:01:12.390
我们来看看搜索树底层最左边的分支

00:01:12.390 --> 00:01:15.590
我们已经知道 最大值是 10 所以没有必要再评估

00:01:15.590 --> 00:01:17.350
右边两个相邻的分支了

00:01:17.349 --> 00:01:20.849
因为它们最多也就能返回 10 而我们已经有 10 了

00:01:20.849 --> 00:01:23.829
所以我们大可以忽略它们 把分值往树上传递

00:01:23.829 --> 00:01:24.329
好极了

00:01:24.329 --> 00:01:28.359
我想 我们还可以给最上面的节点分值设限

00:01:28.359 --> 00:01:30.189
但在这里并没有什么意义

00:01:30.189 --> 00:01:33.549
玩家 1 的值会在 0 和 10 之间

00:01:33.549 --> 00:01:35.439
其它玩家的值则会小于 10

00:01:35.439 --> 00:01:37.590
但中间的分支会造成一些限制的

00:01:37.590 --> 00:01:40.634
右边的分支就需要用到浅层剪枝

00:01:40.634 --> 00:01:42.459
在中间这个分支的最底层

00:01:42.459 --> 00:01:44.849
玩家 2 会选择最左边的分支

00:01:44.849 --> 00:01:48.379
现在我们知道玩家 1 的值会大于或等于 3

00:01:48.379 --> 00:01:49.859
而由于总和是 10

00:01:49.859 --> 00:01:52.599
所以其它两个玩家的分值分别被限制在 7 或以下

00:01:54.209 --> 00:01:58.530
但在旁边这个分支里 玩家 2 会有一个 7 或大于 7 的值

00:01:58.530 --> 00:02:01.189
这就意味着玩家 1 会得到等于或小于 3 的值

00:02:02.439 --> 00:02:06.409
由于我们已经有 3 了 所以我们可以把最后这个分支剪掉

00:02:06.409 --> 00:02:07.829
它是什么值都无关紧要了

00:02:07.829 --> 00:02:10.090
因为我们会选择已有的值

00:02:10.090 --> 00:02:12.150
你已经明白其中关节了

00:02:12.150 --> 00:02:13.950
我们来做做练习 看看另一个例子吧

