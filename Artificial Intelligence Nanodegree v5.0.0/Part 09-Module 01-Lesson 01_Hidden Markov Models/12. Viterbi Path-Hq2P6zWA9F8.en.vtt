WEBVTT
Kind: captions
Language: en

00:00:00.240 --> 00:00:04.160
We can follow this process to fill
out all the nodes in our charts.

00:00:04.160 --> 00:00:06.720
&gt;&gt; Now, we need to look for
the most likely path.

00:00:06.719 --> 00:00:11.506
Each time frame will modify the
transition probability times the output

00:00:11.506 --> 00:00:13.509
probability.

00:00:13.509 --> 00:00:17.839
Note, to the most likely path may not
be the greedy path, in other words.

00:00:17.839 --> 00:00:20.489
The highest expected value
with each transition,

00:00:20.489 --> 00:00:24.189
may not necessarily lead to
the highest valued overall path.

00:00:24.190 --> 00:00:28.089
In this case the maximum path since,
be this one.

00:00:28.089 --> 00:00:32.079
&gt;&gt; Okay, so let's consider the
transition from time one to time two.

00:00:32.079 --> 00:00:34.969
We can stay in state 1 or
move to state 2.

00:00:34.969 --> 00:00:37.909
What should we use to
compare the two options?

00:00:37.909 --> 00:00:43.509
&gt;&gt; Expected value of staying
in state 1 is 0.8 times 0.5,

00:00:43.509 --> 00:00:49.289
yet going from state 1 to state
2 is 0.2 times 10 to the- 7.

00:00:49.289 --> 00:00:53.460
The greedy algorithm would expect to
stay in state 1 since that value is

00:00:53.460 --> 00:00:54.539
bigger.

00:00:54.539 --> 00:00:58.609
&gt;&gt; Okay, I see, how does Viterbi
account for the overall path?

00:00:58.609 --> 00:01:01.820
&gt;&gt; We need to keep track of the
probability of each possible sequence of

00:01:01.820 --> 00:01:02.789
the trellis.

00:01:02.789 --> 00:01:06.236
There are only two nodes
in each sequence so far, so

00:01:06.236 --> 00:01:11.781
the two probabilities are 1 x 0.5 x
0.8 x 0.5, which is equal to 0.2.

00:01:11.781 --> 00:01:15.246
&gt;&gt; Or we could've gone
down 1 times 0.5 times 0.2

00:01:15.245 --> 00:01:19.795
times 10 to the negative 7th which
is equal to times to negative 8.

00:01:19.796 --> 00:01:22.058
&gt;&gt; It looks like these numbers
could get really small.

00:01:22.058 --> 00:01:26.515
&gt;&gt; Yes, in practice we should use log
space to calculate these probabilities.

00:01:26.515 --> 00:01:30.224
Otherwise we run out of precision in
the way the OS represents numbers.

00:01:30.224 --> 00:01:32.324
To keep things simple, let's keep going.

00:01:32.325 --> 00:01:36.635
&gt;&gt; Okay, next at t equal to 3,
our expected values from

00:01:36.635 --> 00:01:41.085
state 1 are .8 times .6 and
.2 times 10 to the negative 5.

00:01:41.084 --> 00:01:43.629
It looks like we should
multiply the previous result,

00:01:43.629 --> 00:01:46.854
.2 by our new expected values.

00:01:46.855 --> 00:01:49.180
&gt;&gt; Right
&gt;&gt; We also have to account for

00:01:49.180 --> 00:01:53.676
the path that went through state two
earlier.That one will become ten to

00:01:53.677 --> 00:01:58.098
the negative eight times zero point
five time ten to the negative five or

00:01:58.097 --> 00:02:01.432
ten time zero point five
time ten to the four.

00:02:01.432 --> 00:02:05.082
&gt;&gt; Free state, we going to keep
the path with maximum value, for

00:02:05.082 --> 00:02:08.120
state one is going to be this number.

00:02:08.120 --> 00:02:11.280
For state two,
it's going to be this number, for

00:02:11.280 --> 00:02:13.599
state three, it'll be this number.

00:02:13.599 --> 00:02:17.280
We'll continue this process keeping
track of the maximum path to get to

00:02:17.280 --> 00:02:20.879
each state at each time
through the trailers.

00:02:20.879 --> 00:02:23.370
At the end,
we choose the most likely path.

00:02:23.370 --> 00:02:26.300
For this trellis,
it turns out to be this one.

00:02:26.300 --> 00:02:29.670
The final answer for
the probability of the observation given

00:02:29.669 --> 00:02:34.550
our model is about 0.00035.

00:02:34.550 --> 00:02:38.189
We can then compare this probability
to the corresponding result from

00:02:38.189 --> 00:02:38.969
the trellis for we.

