WEBVTT
Kind: captions
Language: zh-CN

00:00:00.220 --> 00:00:03.320
能不能再给我们一个迭代改进问题的例子呢？

00:00:03.319 --> 00:00:06.129
好啊 这个例子会贯穿本课

00:00:06.129 --> 00:00:07.769
叫做 n 皇后

00:00:07.769 --> 00:00:10.449
基本上就是要想办法放置 n 个皇后

00:00:10.449 --> 00:00:11.899
使其无法相互攻击

00:00:11.900 --> 00:00:14.120
而游戏棋盘大小为 n 乘 n

00:00:14.119 --> 00:00:16.975
换句话说 各皇后不能在同一行

00:00:16.975 --> 00:00:20.619
同一列或同一对角线上

00:00:20.620 --> 00:00:23.800
好 这是四皇后的一个棋局

00:00:23.800 --> 00:00:25.719
我随机放置了皇后

00:00:25.719 --> 00:00:28.859
这些皇后要彼此攻击有五种走法

00:00:28.859 --> 00:00:31.649
所以我们的目标是把攻击数减少到 0？

00:00:31.649 --> 00:00:34.100
对的 我们有四个方向可以移动

00:00:34.100 --> 00:00:36.829
具体来说 我们可以让各皇后垂直走动

00:00:36.829 --> 00:00:39.710
从而最小化攻击数

00:00:39.710 --> 00:00:42.299
好 有两个皇后有三种攻击走法

00:00:42.299 --> 00:00:45.219
似乎先把这两者之一移动下比较好

00:00:45.219 --> 00:00:47.699
如果我们把第二个皇后移动到最上面这一行

00:00:47.700 --> 00:00:50.080
就可以把 5 个攻击减掉 3 了

00:00:50.079 --> 00:00:52.479
这样攻击数就只剩下 2 个了

00:00:52.479 --> 00:00:55.909
看来我们应该总从攻击数最多的皇后着手

00:00:55.909 --> 00:00:58.439
这让我想起了约束满足问题里的

00:00:58.439 --> 00:01:00.269
最受约束变量启发式

00:01:00.270 --> 00:01:02.085
不过我们下一节课再来讲那个知识

00:01:02.085 --> 00:01:02.880
恩

00:01:02.880 --> 00:01:06.920
采用这个办法 我们要移动的下一个皇后应该是第三个

00:01:06.920 --> 00:01:08.890
它涉及两个攻击走法

00:01:08.890 --> 00:01:10.709
如果我们把它放到最下面的一行

00:01:10.709 --> 00:01:14.109
那就没有攻击了 我们解决了问题

00:01:14.109 --> 00:01:16.034
真是意外的快啊！

00:01:16.034 --> 00:01:18.109
只走两步就解决了问题

00:01:18.109 --> 00:01:21.060
如果用简单搜索 我们会多走很多步的

00:01:21.060 --> 00:01:24.460
的确 这个例子也阐明了先用笨办法

00:01:24.459 --> 00:01:26.979
不行再加点智能来为问题求解的思路

00:01:26.980 --> 00:01:29.390
不过四皇后好像太简单了

00:01:29.390 --> 00:01:31.579
我们来试试五皇后 看看会不会变难

